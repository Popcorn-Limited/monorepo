/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAngleRouter,
  MockAngleRouterInterface,
} from "../MockAngleRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MockERC20",
        name: "_agEur",
        type: "address",
      },
      {
        internalType: "contract MockERC20",
        name: "_usdc",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_eurPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "agEur",
    outputs: [
      {
        internalType: "contract MockERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "eurPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdc",
    outputs: [
      {
        internalType: "contract MockERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104a23803806104a283398101604081905261002f91610083565b600080546001600160a01b039485166001600160a01b03199182161790915560018054939094169216919091179091556002556100bf565b80516001600160a01b038116811461007e57600080fd5b919050565b60008060006060848603121561009857600080fd5b6100a184610067565b92506100af60208501610067565b9150604084015190509250925092565b6103d4806100ce6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063165b76921461005c57806324a431461461008c5780633e413bee146100a3578063b044d1e0146100b6578063ee7b4950146100cb575b600080fd5b60005461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009560025481565b604051908152602001610083565b60015461006f906001600160a01b031681565b6100c96100c43660046102ad565b6100de565b005b6100c96100d93660046102ad565b6101ee565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061011290339030908990600401610304565b6020604051808303816000875af1158015610131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101559190610328565b506000546002546001600160a01b03909116906340c10f1990879061017f8864e8d4a51000610351565b610189919061037c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156101cf57600080fd5b505af11580156101e3573d6000803e3d6000fd5b505050505050505050565b6000546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061022290339030908990600401610304565b6020604051808303816000875af1158015610241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102659190610328565b506001546002546001600160a01b03909116906340c10f1990879064e8d4a510009061017f9089610351565b80356001600160a01b03811681146102a857600080fd5b919050565b600080600080600060a086880312156102c557600080fd5b6102ce86610291565b945060208601359350604086013592506102ea60608701610291565b91506102f860808701610291565b90509295509295909350565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561033a57600080fd5b8151801515811461034a57600080fd5b9392505050565b808202811582820484141761037657634e487b7160e01b600052601160045260246000fd5b92915050565b60008261039957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a87c3051c60cdc87d15e034190f28fad09c9d37820fab0b1459b5aa33195bec464736f6c63430008110033";

export class MockAngleRouter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _agEur: string,
    _usdc: string,
    _eurPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAngleRouter> {
    return super.deploy(
      _agEur,
      _usdc,
      _eurPrice,
      overrides || {}
    ) as Promise<MockAngleRouter>;
  }
  getDeployTransaction(
    _agEur: string,
    _usdc: string,
    _eurPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _agEur,
      _usdc,
      _eurPrice,
      overrides || {}
    );
  }
  attach(address: string): MockAngleRouter {
    return super.attach(address) as MockAngleRouter;
  }
  connect(signer: Signer): MockAngleRouter__factory {
    return super.connect(signer) as MockAngleRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAngleRouterInterface {
    return new utils.Interface(_abi) as MockAngleRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAngleRouter {
    return new Contract(address, _abi, signerOrProvider) as MockAngleRouter;
  }
}
