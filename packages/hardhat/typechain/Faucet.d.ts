/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FaucetInterface extends ethers.utils.Interface {
  functions: {
    "cDai()": FunctionFragment;
    "crv()": FunctionFragment;
    "crv3CryptoLP()": FunctionFragment;
    "crv3CryptoPool()": FunctionFragment;
    "crvAaveLP()": FunctionFragment;
    "crvAavePool()": FunctionFragment;
    "crvCompLP()": FunctionFragment;
    "crvCompPool()": FunctionFragment;
    "crvCvxCrvLP()": FunctionFragment;
    "crvCvxCrvPool()": FunctionFragment;
    "crvIbBtcLP()": FunctionFragment;
    "crvIbBtcPool()": FunctionFragment;
    "crvSBtcLP()": FunctionFragment;
    "crvSBtcPool()": FunctionFragment;
    "crvSethLP()": FunctionFragment;
    "crvSethPool()": FunctionFragment;
    "dai()": FunctionFragment;
    "sendCrv3CryptoLPTokens(uint256,address)": FunctionFragment;
    "sendCrvAaveLPTokens(uint256,address)": FunctionFragment;
    "sendCrvCompLPTokens(uint256,address)": FunctionFragment;
    "sendCrvCvxCrvLPTokens(uint256,address)": FunctionFragment;
    "sendCrvIbBtcLPTokens(uint256,address)": FunctionFragment;
    "sendCrvSethLPTokens(uint256,address)": FunctionFragment;
    "sendThreeCrv(uint256,address)": FunctionFragment;
    "sendTokens(address,uint256,address)": FunctionFragment;
    "threeCrv()": FunctionFragment;
    "triPool()": FunctionFragment;
    "uniswap()": FunctionFragment;
    "usdt()": FunctionFragment;
    "wbtc()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cDai", values?: undefined): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crv3CryptoLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crv3CryptoPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvAaveLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvAavePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvCompLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvCompPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvCvxCrvLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvCvxCrvPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvIbBtcLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvIbBtcPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvSBtcLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvSBtcPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvSethLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvSethPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendCrv3CryptoLPTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCrvAaveLPTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCrvCompLPTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCrvCvxCrvLPTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCrvIbBtcLPTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCrvSethLPTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendThreeCrv",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokens",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "threeCrv", values?: undefined): string;
  encodeFunctionData(functionFragment: "triPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "uniswap", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(functionFragment: "wbtc", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crv3CryptoLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crv3CryptoPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvAaveLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crvAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvCompLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crvCompPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crvCvxCrvLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crvCvxCrvPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvIbBtcLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crvIbBtcPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvSBtcLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crvSBtcPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvSethLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crvSethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendCrv3CryptoLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCrvAaveLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCrvCompLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCrvCvxCrvLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCrvIbBtcLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCrvSethLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendThreeCrv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threeCrv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "triPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uniswap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wbtc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class Faucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FaucetInterface;

  functions: {
    cDai(overrides?: CallOverrides): Promise<[string]>;

    crv(overrides?: CallOverrides): Promise<[string]>;

    crv3CryptoLP(overrides?: CallOverrides): Promise<[string]>;

    crv3CryptoPool(overrides?: CallOverrides): Promise<[string]>;

    crvAaveLP(overrides?: CallOverrides): Promise<[string]>;

    crvAavePool(overrides?: CallOverrides): Promise<[string]>;

    crvCompLP(overrides?: CallOverrides): Promise<[string]>;

    crvCompPool(overrides?: CallOverrides): Promise<[string]>;

    crvCvxCrvLP(overrides?: CallOverrides): Promise<[string]>;

    crvCvxCrvPool(overrides?: CallOverrides): Promise<[string]>;

    crvIbBtcLP(overrides?: CallOverrides): Promise<[string]>;

    crvIbBtcPool(overrides?: CallOverrides): Promise<[string]>;

    crvSBtcLP(overrides?: CallOverrides): Promise<[string]>;

    crvSBtcPool(overrides?: CallOverrides): Promise<[string]>;

    crvSethLP(overrides?: CallOverrides): Promise<[string]>;

    crvSethPool(overrides?: CallOverrides): Promise<[string]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    sendCrv3CryptoLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendCrvAaveLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendCrvCompLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendCrvCvxCrvLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendCrvIbBtcLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendCrvSethLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendThreeCrv(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendTokens(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    threeCrv(overrides?: CallOverrides): Promise<[string]>;

    triPool(overrides?: CallOverrides): Promise<[string]>;

    uniswap(overrides?: CallOverrides): Promise<[string]>;

    usdt(overrides?: CallOverrides): Promise<[string]>;

    wbtc(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  cDai(overrides?: CallOverrides): Promise<string>;

  crv(overrides?: CallOverrides): Promise<string>;

  crv3CryptoLP(overrides?: CallOverrides): Promise<string>;

  crv3CryptoPool(overrides?: CallOverrides): Promise<string>;

  crvAaveLP(overrides?: CallOverrides): Promise<string>;

  crvAavePool(overrides?: CallOverrides): Promise<string>;

  crvCompLP(overrides?: CallOverrides): Promise<string>;

  crvCompPool(overrides?: CallOverrides): Promise<string>;

  crvCvxCrvLP(overrides?: CallOverrides): Promise<string>;

  crvCvxCrvPool(overrides?: CallOverrides): Promise<string>;

  crvIbBtcLP(overrides?: CallOverrides): Promise<string>;

  crvIbBtcPool(overrides?: CallOverrides): Promise<string>;

  crvSBtcLP(overrides?: CallOverrides): Promise<string>;

  crvSBtcPool(overrides?: CallOverrides): Promise<string>;

  crvSethLP(overrides?: CallOverrides): Promise<string>;

  crvSethPool(overrides?: CallOverrides): Promise<string>;

  dai(overrides?: CallOverrides): Promise<string>;

  sendCrv3CryptoLPTokens(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendCrvAaveLPTokens(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendCrvCompLPTokens(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendCrvCvxCrvLPTokens(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendCrvIbBtcLPTokens(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendCrvSethLPTokens(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendThreeCrv(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendTokens(
    token: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  threeCrv(overrides?: CallOverrides): Promise<string>;

  triPool(overrides?: CallOverrides): Promise<string>;

  uniswap(overrides?: CallOverrides): Promise<string>;

  usdt(overrides?: CallOverrides): Promise<string>;

  wbtc(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cDai(overrides?: CallOverrides): Promise<string>;

    crv(overrides?: CallOverrides): Promise<string>;

    crv3CryptoLP(overrides?: CallOverrides): Promise<string>;

    crv3CryptoPool(overrides?: CallOverrides): Promise<string>;

    crvAaveLP(overrides?: CallOverrides): Promise<string>;

    crvAavePool(overrides?: CallOverrides): Promise<string>;

    crvCompLP(overrides?: CallOverrides): Promise<string>;

    crvCompPool(overrides?: CallOverrides): Promise<string>;

    crvCvxCrvLP(overrides?: CallOverrides): Promise<string>;

    crvCvxCrvPool(overrides?: CallOverrides): Promise<string>;

    crvIbBtcLP(overrides?: CallOverrides): Promise<string>;

    crvIbBtcPool(overrides?: CallOverrides): Promise<string>;

    crvSBtcLP(overrides?: CallOverrides): Promise<string>;

    crvSBtcPool(overrides?: CallOverrides): Promise<string>;

    crvSethLP(overrides?: CallOverrides): Promise<string>;

    crvSethPool(overrides?: CallOverrides): Promise<string>;

    dai(overrides?: CallOverrides): Promise<string>;

    sendCrv3CryptoLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCrvAaveLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCrvCompLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCrvCvxCrvLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCrvIbBtcLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCrvSethLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendThreeCrv(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendTokens(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    threeCrv(overrides?: CallOverrides): Promise<string>;

    triPool(overrides?: CallOverrides): Promise<string>;

    uniswap(overrides?: CallOverrides): Promise<string>;

    usdt(overrides?: CallOverrides): Promise<string>;

    wbtc(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cDai(overrides?: CallOverrides): Promise<BigNumber>;

    crv(overrides?: CallOverrides): Promise<BigNumber>;

    crv3CryptoLP(overrides?: CallOverrides): Promise<BigNumber>;

    crv3CryptoPool(overrides?: CallOverrides): Promise<BigNumber>;

    crvAaveLP(overrides?: CallOverrides): Promise<BigNumber>;

    crvAavePool(overrides?: CallOverrides): Promise<BigNumber>;

    crvCompLP(overrides?: CallOverrides): Promise<BigNumber>;

    crvCompPool(overrides?: CallOverrides): Promise<BigNumber>;

    crvCvxCrvLP(overrides?: CallOverrides): Promise<BigNumber>;

    crvCvxCrvPool(overrides?: CallOverrides): Promise<BigNumber>;

    crvIbBtcLP(overrides?: CallOverrides): Promise<BigNumber>;

    crvIbBtcPool(overrides?: CallOverrides): Promise<BigNumber>;

    crvSBtcLP(overrides?: CallOverrides): Promise<BigNumber>;

    crvSBtcPool(overrides?: CallOverrides): Promise<BigNumber>;

    crvSethLP(overrides?: CallOverrides): Promise<BigNumber>;

    crvSethPool(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    sendCrv3CryptoLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendCrvAaveLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendCrvCompLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendCrvCvxCrvLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendCrvIbBtcLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendCrvSethLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendThreeCrv(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendTokens(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    threeCrv(overrides?: CallOverrides): Promise<BigNumber>;

    triPool(overrides?: CallOverrides): Promise<BigNumber>;

    uniswap(overrides?: CallOverrides): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    wbtc(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv3CryptoLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv3CryptoPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvAaveLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvAavePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvCompLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvCompPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvCvxCrvLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvCvxCrvPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvIbBtcLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvIbBtcPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvSBtcLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvSBtcPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvSethLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvSethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendCrv3CryptoLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendCrvAaveLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendCrvCompLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendCrvCvxCrvLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendCrvIbBtcLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendCrvSethLPTokens(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendThreeCrv(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendTokens(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    threeCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    triPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wbtc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
