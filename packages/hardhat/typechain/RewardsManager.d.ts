/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RewardsManagerInterface extends ethers.utils.Interface {
  functions: {
    "SWAP_TIMEOUT()": FunctionFragment;
    "contractName()": FunctionFragment;
    "contractRegistry()": FunctionFragment;
    "distributeRewards()": FunctionFragment;
    "getRewardSplits()": FunctionFragment;
    "rewardSplits(uint256)": FunctionFragment;
    "setRewardSplits(uint256[4])": FunctionFragment;
    "swapTokenForRewards(address[],uint256)": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SWAP_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardSplits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSplits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardSplits",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForRewards",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "SWAP_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryVaultsDeposited(uint256)": EventFragment;
    "InsuranceDeposited(address,uint256)": EventFragment;
    "RegionChanged(address,address)": EventFragment;
    "RewardSplitsUpdated(uint256[4])": EventFragment;
    "RewardsDistributed(uint256)": EventFragment;
    "StakingDeposited(address,uint256)": EventFragment;
    "TokenSwapped(address,uint256,uint256)": EventFragment;
    "TreasuryDeposited(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryVaultsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardSplitsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSwapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryDeposited"): EventFragment;
}

export type BeneficiaryVaultsDepositedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type InsuranceDepositedEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type RegionChangedEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type RewardSplitsUpdatedEvent = TypedEvent<
  [[BigNumber, BigNumber, BigNumber, BigNumber]] & {
    splits: [BigNumber, BigNumber, BigNumber, BigNumber];
  }
>;

export type RewardsDistributedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type StakingDepositedEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type TokenSwappedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
  }
>;

export type TreasuryDepositedEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export class RewardsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsManagerInterface;

  functions: {
    SWAP_TIMEOUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    distributeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardSplits(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber]]>;

    rewardSplits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setRewardSplits(
      _splits: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenForRewards(
      _path: string[],
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;
  };

  SWAP_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

  contractName(overrides?: CallOverrides): Promise<string>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  distributeRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardSplits(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  rewardSplits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRewardSplits(
    _splits: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenForRewards(
    _path: string[],
    _minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SWAP_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<string>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    distributeRewards(overrides?: CallOverrides): Promise<void>;

    getRewardSplits(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    rewardSplits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardSplits(
      _splits: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokenForRewards(
      _path: string[],
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BeneficiaryVaultsDeposited(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    BeneficiaryVaultsDeposited(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "InsuranceDeposited(address,uint256)"(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    InsuranceDeposited(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "RegionChanged(address,address)"(
      from?: null,
      to?: null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    RegionChanged(
      from?: null,
      to?: null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "RewardSplitsUpdated(uint256[4])"(
      splits?: null
    ): TypedEventFilter<
      [[BigNumber, BigNumber, BigNumber, BigNumber]],
      { splits: [BigNumber, BigNumber, BigNumber, BigNumber] }
    >;

    RewardSplitsUpdated(
      splits?: null
    ): TypedEventFilter<
      [[BigNumber, BigNumber, BigNumber, BigNumber]],
      { splits: [BigNumber, BigNumber, BigNumber, BigNumber] }
    >;

    "RewardsDistributed(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    RewardsDistributed(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "StakingDeposited(address,uint256)"(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    StakingDeposited(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "TokenSwapped(address,uint256,uint256)"(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amountIn: BigNumber; amountOut: BigNumber }
    >;

    TokenSwapped(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amountIn: BigNumber; amountOut: BigNumber }
    >;

    "TreasuryDeposited(address,uint256)"(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    TreasuryDeposited(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    SWAP_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardSplits(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSplits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardSplits(
      _splits: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenForRewards(
      _path: string[],
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SWAP_TIMEOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardSplits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardSplits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardSplits(
      _splits: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenForRewards(
      _path: string[],
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
