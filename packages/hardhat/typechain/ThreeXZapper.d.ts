/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ThreeXZapperInterface extends ethers.utils.Interface {
  functions: {
    "claimAndSwapToStable(bytes32,int128,int128,uint256)": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "token(uint256)": FunctionFragment;
    "zapIntoBatch(uint256,int128,int128,uint256)": FunctionFragment;
    "zapOutOfBatch(bytes32,uint256,int128,int128,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimAndSwapToStable",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "zapIntoBatch",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOutOfBatch",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimAndSwapToStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zapIntoBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapOutOfBatch",
    data: BytesLike
  ): Result;

  events: {
    "ClaimedIntoStable(bytes32,int128,uint256,uint256,address)": EventFragment;
    "ZappedIntoBatch(uint256,address)": EventFragment;
    "ZappedOutOfBatch(bytes32,int128,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedIntoStable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZappedIntoBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZappedOutOfBatch"): EventFragment;
}

export type ClaimedIntoStableEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    batchId: string;
    stableCoinIndex: BigNumber;
    inputAmount: BigNumber;
    outputAmount: BigNumber;
    account: string;
  }
>;

export type ZappedIntoBatchEvent = TypedEvent<
  [BigNumber, string] & { outputAmount: BigNumber; account: string }
>;

export type ZappedOutOfBatchEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    batchId: string;
    stableCoinIndex: BigNumber;
    inputAmount: BigNumber;
    outputAmount: BigNumber;
    account: string;
  }
>;

export class ThreeXZapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ThreeXZapperInterface;

  functions: {
    claimAndSwapToStable(
      _batchId: BytesLike,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    zapIntoBatch(
      _amount: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapOutOfBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimAndSwapToStable(
    _batchId: BytesLike,
    _i: BigNumberish,
    _j: BigNumberish,
    _min_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  zapIntoBatch(
    _amount: BigNumberish,
    _i: BigNumberish,
    _j: BigNumberish,
    _min_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapOutOfBatch(
    _batchId: BytesLike,
    _amountToWithdraw: BigNumberish,
    _i: BigNumberish,
    _j: BigNumberish,
    _min_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimAndSwapToStable(
      _batchId: BytesLike,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    token(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    zapIntoBatch(
      _amount: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zapOutOfBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimedIntoStable(bytes32,int128,uint256,uint256,address)"(
      batchId?: null,
      stableCoinIndex?: null,
      inputAmount?: null,
      outputAmount?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        batchId: string;
        stableCoinIndex: BigNumber;
        inputAmount: BigNumber;
        outputAmount: BigNumber;
        account: string;
      }
    >;

    ClaimedIntoStable(
      batchId?: null,
      stableCoinIndex?: null,
      inputAmount?: null,
      outputAmount?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        batchId: string;
        stableCoinIndex: BigNumber;
        inputAmount: BigNumber;
        outputAmount: BigNumber;
        account: string;
      }
    >;

    "ZappedIntoBatch(uint256,address)"(
      outputAmount?: null,
      account?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { outputAmount: BigNumber; account: string }
    >;

    ZappedIntoBatch(
      outputAmount?: null,
      account?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { outputAmount: BigNumber; account: string }
    >;

    "ZappedOutOfBatch(bytes32,int128,uint256,uint256,address)"(
      batchId?: null,
      stableCoinIndex?: null,
      inputAmount?: null,
      outputAmount?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        batchId: string;
        stableCoinIndex: BigNumber;
        inputAmount: BigNumber;
        outputAmount: BigNumber;
        account: string;
      }
    >;

    ZappedOutOfBatch(
      batchId?: null,
      stableCoinIndex?: null,
      inputAmount?: null,
      outputAmount?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        batchId: string;
        stableCoinIndex: BigNumber;
        inputAmount: BigNumber;
        outputAmount: BigNumber;
        account: string;
      }
    >;
  };

  estimateGas: {
    claimAndSwapToStable(
      _batchId: BytesLike,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    zapIntoBatch(
      _amount: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapOutOfBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimAndSwapToStable(
      _batchId: BytesLike,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zapIntoBatch(
      _amount: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapOutOfBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _i: BigNumberish,
      _j: BigNumberish,
      _min_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
