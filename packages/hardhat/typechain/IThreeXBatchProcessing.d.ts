/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IThreeXBatchProcessingInterface extends ethers.utils.Interface {
  functions: {
    "batchMint()": FunctionFragment;
    "batchRedeem()": FunctionFragment;
    "batchStorage()": FunctionFragment;
    "claim(bytes32,address)": FunctionFragment;
    "componentDependencies(address)": FunctionFragment;
    "currentMintBatchId()": FunctionFragment;
    "currentRedeemBatchId()": FunctionFragment;
    "depositForMint(uint256,address)": FunctionFragment;
    "depositForRedeem(uint256)": FunctionFragment;
    "getBatch(bytes32)": FunctionFragment;
    "getMinAmountFromRedeem(uint256,uint256)": FunctionFragment;
    "getMinAmountToMint(uint256,uint256,uint256)": FunctionFragment;
    "mintBatchTokens()": FunctionFragment;
    "redeemBatchTokens()": FunctionFragment;
    "slippage()": FunctionFragment;
    "swapToken()": FunctionFragment;
    "valueOfComponents(address[],uint256[])": FunctionFragment;
    "withdrawFromBatch(bytes32,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "batchMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "componentDependencies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMintBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRedeemBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositForMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBatch", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getMinAmountFromRedeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinAmountToMint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatchTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemBatchTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "slippage", values?: undefined): string;
  encodeFunctionData(functionFragment: "swapToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "valueOfComponents",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromBatch",
    values: [BytesLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "componentDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMintBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRedeemBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinAmountFromRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinAmountToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBatchTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemBatchTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valueOfComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromBatch",
    data: BytesLike
  ): Result;

  events: {};
}

export class IThreeXBatchProcessing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IThreeXBatchProcessingInterface;

  functions: {
    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchStorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      batchId_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    componentDependencies(
      yToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, string] & {
          lpToken: string;
          utilityPool: string;
          oracle: string;
          curveMetaPool: string;
          angleRouter: string;
        }
      ]
    >;

    currentMintBatchId(overrides?: CallOverrides): Promise<[string]>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<[string]>;

    depositForMint(
      amount_: BigNumberish,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositForRedeem(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          id: string;
          batchType: number;
          batchId: string;
          claimable: boolean;
          unclaimedShares: BigNumber;
          sourceTokenBalance: BigNumber;
          targetTokenBalance: BigNumber;
          sourceToken: string;
          targetToken: string;
          owner: string;
        }
      ]
    >;

    getMinAmountFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintBatchTokens(
      overrides?: CallOverrides
    ): Promise<
      [[string, string] & { targetToken: string; sourceToken: string }]
    >;

    redeemBatchTokens(
      overrides?: CallOverrides
    ): Promise<
      [[string, string] & { targetToken: string; sourceToken: string }]
    >;

    slippage(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }]
    >;

    swapToken(overrides?: CallOverrides): Promise<[string]>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRedeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchStorage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    batchId_: BytesLike,
    account_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  componentDependencies(
    yToken: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      lpToken: string;
      utilityPool: string;
      oracle: string;
      curveMetaPool: string;
      angleRouter: string;
    }
  >;

  currentMintBatchId(overrides?: CallOverrides): Promise<string>;

  currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

  depositForMint(
    amount_: BigNumberish,
    account_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositForRedeem(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBatch(
    batchId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      id: string;
      batchType: number;
      batchId: string;
      claimable: boolean;
      unclaimedShares: BigNumber;
      sourceTokenBalance: BigNumber;
      targetTokenBalance: BigNumber;
      sourceToken: string;
      targetToken: string;
      owner: string;
    }
  >;

  getMinAmountFromRedeem(
    _valueOfComponents: BigNumberish,
    _slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinAmountToMint(
    _valueOfBatch: BigNumberish,
    _valueOfComponentsPerUnit: BigNumberish,
    _slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintBatchTokens(
    overrides?: CallOverrides
  ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

  redeemBatchTokens(
    overrides?: CallOverrides
  ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

  slippage(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
  >;

  swapToken(overrides?: CallOverrides): Promise<string>;

  valueOfComponents(
    _tokenAddresses: string[],
    _quantities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawFromBatch(bytes32,uint256,address)"(
    batchId_: BytesLike,
    amountToWithdraw_: BigNumberish,
    account_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromBatch(bytes32,uint256,address,address)"(
    batchId_: BytesLike,
    amountToWithdraw_: BigNumberish,
    _withdrawFor: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchMint(overrides?: CallOverrides): Promise<void>;

    batchRedeem(overrides?: CallOverrides): Promise<void>;

    batchStorage(overrides?: CallOverrides): Promise<string>;

    claim(
      batchId_: BytesLike,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    componentDependencies(
      yToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        lpToken: string;
        utilityPool: string;
        oracle: string;
        curveMetaPool: string;
        angleRouter: string;
      }
    >;

    currentMintBatchId(overrides?: CallOverrides): Promise<string>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

    depositForMint(
      amount_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositForRedeem(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        id: string;
        batchType: number;
        batchId: string;
        claimable: boolean;
        unclaimedShares: BigNumber;
        sourceTokenBalance: BigNumber;
        targetTokenBalance: BigNumber;
        sourceToken: string;
        targetToken: string;
        owner: string;
      }
    >;

    getMinAmountFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBatchTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

    redeemBatchTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

    slippage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
    >;

    swapToken(overrides?: CallOverrides): Promise<string>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchStorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      batchId_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    componentDependencies(
      yToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMintBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    depositForMint(
      amount_: BigNumberish,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositForRedeem(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBatch(batchId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getMinAmountFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBatchTokens(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBatchTokens(overrides?: CallOverrides): Promise<BigNumber>;

    slippage(overrides?: CallOverrides): Promise<BigNumber>;

    swapToken(overrides?: CallOverrides): Promise<BigNumber>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchStorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      batchId_: BytesLike,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    componentDependencies(
      yToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMintBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRedeemBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositForMint(
      amount_: BigNumberish,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositForRedeem(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinAmountFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBatchTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemBatchTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      batchId_: BytesLike,
      amountToWithdraw_: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
