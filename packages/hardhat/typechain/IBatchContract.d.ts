/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBatchContractInterface extends ethers.utils.Interface {
  functions: {
    "batchMint()": FunctionFragment;
    "batchRedeem()": FunctionFragment;
    "currentMintBatchId()": FunctionFragment;
    "currentRedeemBatchId()": FunctionFragment;
    "getAccountBalance(bytes32,address)": FunctionFragment;
    "getAccountBatches(address)": FunctionFragment;
    "getBatch(bytes32)": FunctionFragment;
    "getBatchIds(uint256)": FunctionFragment;
    "setSlippage(uint256,uint256)": FunctionFragment;
    "valueOfComponents(address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "batchMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMintBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRedeemBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBatches",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBatch", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBatchIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfComponents",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMintBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRedeemBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfComponents",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBatchContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBatchContractInterface;

  functions: {
    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentMintBatchId(overrides?: CallOverrides): Promise<[string]>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<[string]>;

    getAccountBalance(
      batchId: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountBatches(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          id: string;
          batchType: number;
          batchId: string;
          claimable: boolean;
          unclaimedShares: BigNumber;
          sourceTokenBalance: BigNumber;
          targetTokenBalance: BigNumber;
          sourceToken: string;
          targetToken: string;
          owner: string;
        }
      ]
    >;

    getBatchIds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          id: string;
          batchType: number;
          batchId: string;
          claimable: boolean;
          unclaimedShares: BigNumber;
          sourceTokenBalance: BigNumber;
          targetTokenBalance: BigNumber;
          sourceToken: string;
          targetToken: string;
          owner: string;
        }
      ]
    >;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  batchMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRedeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentMintBatchId(overrides?: CallOverrides): Promise<string>;

  currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

  getAccountBalance(
    batchId: BytesLike,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountBatches(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBatch(
    batchId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      id: string;
      batchType: number;
      batchId: string;
      claimable: boolean;
      unclaimedShares: BigNumber;
      sourceTokenBalance: BigNumber;
      targetTokenBalance: BigNumber;
      sourceToken: string;
      targetToken: string;
      owner: string;
    }
  >;

  getBatchIds(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      id: string;
      batchType: number;
      batchId: string;
      claimable: boolean;
      unclaimedShares: BigNumber;
      sourceTokenBalance: BigNumber;
      targetTokenBalance: BigNumber;
      sourceToken: string;
      targetToken: string;
      owner: string;
    }
  >;

  setSlippage(
    _mintSlippage: BigNumberish,
    _redeemSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  valueOfComponents(
    _tokenAddresses: string[],
    _quantities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    batchMint(overrides?: CallOverrides): Promise<void>;

    batchRedeem(overrides?: CallOverrides): Promise<void>;

    currentMintBatchId(overrides?: CallOverrides): Promise<string>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

    getAccountBalance(
      batchId: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatches(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        id: string;
        batchType: number;
        batchId: string;
        claimable: boolean;
        unclaimedShares: BigNumber;
        sourceTokenBalance: BigNumber;
        targetTokenBalance: BigNumber;
        sourceToken: string;
        targetToken: string;
        owner: string;
      }
    >;

    getBatchIds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        id: string;
        batchType: number;
        batchId: string;
        claimable: boolean;
        unclaimedShares: BigNumber;
        sourceTokenBalance: BigNumber;
        targetTokenBalance: BigNumber;
        sourceToken: string;
        targetToken: string;
        owner: string;
      }
    >;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentMintBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountBalance(
      batchId: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatches(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatch(batchId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getBatchIds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentMintBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRedeemBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBalance(
      batchId: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBatches(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchIds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
