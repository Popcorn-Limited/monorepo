/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ThreeXWhaleProcessingInterface extends ethers.utils.Interface {
  functions: {
    "acceptClientAccess(address)": FunctionFragment;
    "basicIssuanceModule()": FunctionFragment;
    "batchStorage()": FunctionFragment;
    "claim(bytes32,address)": FunctionFragment;
    "claimAndStake(bytes32)": FunctionFragment;
    "claimFee(bytes32)": FunctionFragment;
    "claimForAndStake(bytes32,address)": FunctionFragment;
    "contractName()": FunctionFragment;
    "currentMintBatchId()": FunctionFragment;
    "currentRedeemBatchId()": FunctionFragment;
    "depositForMint(uint256,address)": FunctionFragment;
    "depositForRedeem(uint256)": FunctionFragment;
    "feeTypes(uint256)": FunctionFragment;
    "fees(bytes32)": FunctionFragment;
    "getAccountBalance(bytes32,address)": FunctionFragment;
    "getAccountBatchIds(address)": FunctionFragment;
    "getAccountBatches(address)": FunctionFragment;
    "getBatch(bytes32)": FunctionFragment;
    "getBatchType(bytes32)": FunctionFragment;
    "grantClientAccess(address)": FunctionFragment;
    "lastMintedAt()": FunctionFragment;
    "lastRedeemedAt()": FunctionFragment;
    "mint(uint256,uint256,bool)": FunctionFragment;
    "mintBatchTokens()": FunctionFragment;
    "moveUnclaimedIntoCurrentBatch(bytes32[],uint256[],bool)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "processingThreshold()": FunctionFragment;
    "redeem(uint256,int128,int128,uint256)": FunctionFragment;
    "redeemBatchTokens()": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "setBatchStorage(address)": FunctionFragment;
    "setFee(bytes32,uint256,address,address)": FunctionFragment;
    "setProcessingThreshold(uint256,uint256,uint256)": FunctionFragment;
    "setSlippage(uint256,uint256)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "slippage()": FunctionFragment;
    "staking()": FunctionFragment;
    "token(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawFromBatch(bytes32,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptClientAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "basicIssuanceModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndStake",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claimFee", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claimForAndStake",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMintBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRedeemBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositForMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBatchIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBatches",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBatch", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBatchType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantClientAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMintedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRedeemedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatchTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveUnclaimedIntoCurrentBatch",
    values: [BytesLike[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processingThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemBatchTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BytesLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessingThreshold",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStaking", values: [string]): string;
  encodeFunctionData(functionFragment: "slippage", values?: undefined): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFromBatch",
    values: [BytesLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptClientAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basicIssuanceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimForAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMintBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRedeemBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBatchIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantClientAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMintedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRedeemedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintBatchTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveUnclaimedIntoCurrentBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemBatchTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProcessingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromBatch",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint8,uint256,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "DepositedUnclaimedSetTokenForRedeem(uint256,address)": EventFragment;
    "FeeUpdated(bytes32,uint256,address,address)": EventFragment;
    "FeesClaimed(bytes32,address,uint256,address)": EventFragment;
    "Minted(uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "ProcessingThresholdUpdated(tuple,tuple)": EventFragment;
    "Redeemed(uint256,uint256)": EventFragment;
    "SlippageUpdated(tuple,tuple)": EventFragment;
    "StakingUpdated(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
    "WithdrawnFromBatch(bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositedUnclaimedSetTokenForRedeem"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessingThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlippageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnFromBatch"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber] & {
    account: string;
    batchType: number;
    shares: BigNumber;
    claimedToken: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber] & { from: string; deposit: BigNumber }
>;

export type DepositedUnclaimedSetTokenForRedeemEvent = TypedEvent<
  [BigNumber, string] & { amount: BigNumber; account: string }
>;

export type FeeUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    feeType: string;
    newRedemptionFee: BigNumber;
    newFeeRecipient: string;
    toke: string;
  }
>;

export type FeesClaimedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    feeType: string;
    recipient: string;
    amount: BigNumber;
    token: string;
  }
>;

export type MintedEvent = TypedEvent<
  [BigNumber, BigNumber] & { inputAmount: BigNumber; outputAmount: BigNumber }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type ProcessingThresholdUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    },
    [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    }
  ] & {
    prevThreshold: [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    };
    newTreshold: [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    };
  }
>;

export type RedeemedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    suppliedTokenAmount: BigNumber;
    outputAmount: BigNumber;
  }
>;

export type SlippageUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber },
    [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
  ] & {
    prev: [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber };
    current: [BigNumber, BigNumber] & {
      mintBps: BigNumber;
      redeemBps: BigNumber;
    };
  }
>;

export type StakingUpdatedEvent = TypedEvent<
  [string, string] & { beforeAddress: string; afterAddress: string }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type WithdrawnFromBatchEvent = TypedEvent<
  [string, BigNumber, string] & {
    batchId: string;
    amount: BigNumber;
    to: string;
  }
>;

export class ThreeXWhaleProcessing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ThreeXWhaleProcessingInterface;

  functions: {
    acceptClientAccess(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    basicIssuanceModule(overrides?: CallOverrides): Promise<[string]>;

    batchStorage(overrides?: CallOverrides): Promise<[string]>;

    claim(
      batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndStake(
      _batchId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFee(
      feeType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimForAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    currentMintBatchId(overrides?: CallOverrides): Promise<[string]>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<[string]>;

    depositForMint(
      amount: BigNumberish,
      depositFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositForRedeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    fees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        accumulated: BigNumber;
        bps: BigNumber;
        recipient: string;
        token: string;
      }
    >;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          id: string;
          batchType: number;
          batchId: string;
          claimable: boolean;
          unclaimedShares: BigNumber;
          sourceTokenBalance: BigNumber;
          targetTokenBalance: BigNumber;
          sourceToken: string;
          targetToken: string;
          owner: string;
        }
      ]
    >;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    grantClientAccess(
      newClient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastMintedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mint(uint256,uint256,bool)"(
      _amount: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256,int128,int128,uint256,bool)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatchTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

    moveUnclaimedIntoCurrentBatch(
      batchIds: BytesLike[],
      shares: BigNumberish[],
      mint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    processingThreshold(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        batchCooldown: BigNumber;
        mintThreshold: BigNumber;
        redeemThreshold: BigNumber;
      }
    >;

    "redeem(uint256,int128,int128,uint256)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256,uint256)"(
      _amount: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemBatchTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBatchStorage(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slippage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
    >;

    staking(overrides?: CallOverrides): Promise<[string]>;

    token(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptClientAccess(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  basicIssuanceModule(overrides?: CallOverrides): Promise<string>;

  batchStorage(overrides?: CallOverrides): Promise<string>;

  claim(
    batchId: BytesLike,
    _claimFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndStake(
    _batchId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFee(
    feeType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimForAndStake(
    _batchId: BytesLike,
    _claimFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractName(overrides?: CallOverrides): Promise<string>;

  currentMintBatchId(overrides?: CallOverrides): Promise<string>;

  currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

  depositForMint(
    amount: BigNumberish,
    depositFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositForRedeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  fees(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      accumulated: BigNumber;
      bps: BigNumber;
      recipient: string;
      token: string;
    }
  >;

  getAccountBalance(
    _id: BytesLike,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountBatchIds(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAccountBatches(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBatch(
    batchId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      id: string;
      batchType: number;
      batchId: string;
      claimable: boolean;
      unclaimedShares: BigNumber;
      sourceTokenBalance: BigNumber;
      targetTokenBalance: BigNumber;
      sourceToken: string;
      targetToken: string;
      owner: string;
    }
  >;

  getBatchType(batchId: BytesLike, overrides?: CallOverrides): Promise<number>;

  grantClientAccess(
    newClient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastMintedAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastRedeemedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "mint(uint256,uint256,bool)"(
    _amount: BigNumberish,
    _minMintAmount: BigNumberish,
    _stake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256,int128,int128,uint256,bool)"(
    _amount: BigNumberish,
    _fromIndex: BigNumberish,
    _toIndex: BigNumberish,
    _minMintAmount: BigNumberish,
    _stake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatchTokens(
    overrides?: CallOverrides
  ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

  moveUnclaimedIntoCurrentBatch(
    batchIds: BytesLike[],
    shares: BigNumberish[],
    mint: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  processingThreshold(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    }
  >;

  "redeem(uint256,int128,int128,uint256)"(
    _amount: BigNumberish,
    _fromIndex: BigNumberish,
    _toIndex: BigNumberish,
    _minRedeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256,uint256)"(
    _amount: BigNumberish,
    _minRedeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemBatchTokens(
    overrides?: CallOverrides
  ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

  setApprovals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBatchStorage(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    feeType: BytesLike,
    bps: BigNumberish,
    recipient: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProcessingThreshold(
    _cooldown: BigNumberish,
    _mintThreshold: BigNumberish,
    _redeemThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlippage(
    _mintSlippage: BigNumberish,
    _redeemSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slippage(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
  >;

  staking(overrides?: CallOverrides): Promise<string>;

  token(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromBatch(bytes32,uint256,address)"(
    _batchId: BytesLike,
    _amountToWithdraw: BigNumberish,
    _withdrawFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromBatch(bytes32,uint256,address,address)"(
    _batchId: BytesLike,
    _amountToWithdraw: BigNumberish,
    _withdrawFor: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptClientAccess(owner: string, overrides?: CallOverrides): Promise<void>;

    basicIssuanceModule(overrides?: CallOverrides): Promise<string>;

    batchStorage(overrides?: CallOverrides): Promise<string>;

    claim(
      batchId: BytesLike,
      _claimFor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndStake(
      _batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(feeType: BytesLike, overrides?: CallOverrides): Promise<void>;

    claimForAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractName(overrides?: CallOverrides): Promise<string>;

    currentMintBatchId(overrides?: CallOverrides): Promise<string>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

    depositForMint(
      amount: BigNumberish,
      depositFor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositForRedeem(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    fees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        accumulated: BigNumber;
        bps: BigNumber;
        recipient: string;
        token: string;
      }
    >;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        id: string;
        batchType: number;
        batchId: string;
        claimable: boolean;
        unclaimedShares: BigNumber;
        sourceTokenBalance: BigNumber;
        targetTokenBalance: BigNumber;
        sourceToken: string;
        targetToken: string;
        owner: string;
      }
    >;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    grantClientAccess(
      newClient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastMintedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,uint256,bool)"(
      _amount: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,int128,int128,uint256,bool)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatchTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

    moveUnclaimedIntoCurrentBatch(
      batchIds: BytesLike[],
      shares: BigNumberish[],
      mint: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    processingThreshold(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        batchCooldown: BigNumber;
        mintThreshold: BigNumber;
        redeemThreshold: BigNumber;
      }
    >;

    "redeem(uint256,int128,int128,uint256)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeem(uint256,uint256)"(
      _amount: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemBatchTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { targetToken: string; sourceToken: string }>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    setBatchStorage(_address: string, overrides?: CallOverrides): Promise<void>;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaking(_staking: string, overrides?: CallOverrides): Promise<void>;

    slippage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
    >;

    staking(overrides?: CallOverrides): Promise<string>;

    token(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Claimed(address,uint8,uint256,uint256)"(
      account?: string | null,
      batchType?: null,
      shares?: null,
      claimedToken?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        account: string;
        batchType: number;
        shares: BigNumber;
        claimedToken: BigNumber;
      }
    >;

    Claimed(
      account?: string | null,
      batchType?: null,
      shares?: null,
      claimedToken?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        account: string;
        batchType: number;
        shares: BigNumber;
        claimedToken: BigNumber;
      }
    >;

    "Deposit(address,uint256)"(
      from?: string | null,
      deposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; deposit: BigNumber }
    >;

    Deposit(
      from?: string | null,
      deposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; deposit: BigNumber }
    >;

    "DepositedUnclaimedSetTokenForRedeem(uint256,address)"(
      amount?: null,
      account?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; account: string }
    >;

    DepositedUnclaimedSetTokenForRedeem(
      amount?: null,
      account?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; account: string }
    >;

    "FeeUpdated(bytes32,uint256,address,address)"(
      feeType?: null,
      newRedemptionFee?: null,
      newFeeRecipient?: null,
      toke?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        feeType: string;
        newRedemptionFee: BigNumber;
        newFeeRecipient: string;
        toke: string;
      }
    >;

    FeeUpdated(
      feeType?: null,
      newRedemptionFee?: null,
      newFeeRecipient?: null,
      toke?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        feeType: string;
        newRedemptionFee: BigNumber;
        newFeeRecipient: string;
        toke: string;
      }
    >;

    "FeesClaimed(bytes32,address,uint256,address)"(
      feeType?: null,
      recipient?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { feeType: string; recipient: string; amount: BigNumber; token: string }
    >;

    FeesClaimed(
      feeType?: null,
      recipient?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { feeType: string; recipient: string; amount: BigNumber; token: string }
    >;

    "Minted(uint256,uint256)"(
      inputAmount?: null,
      outputAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { inputAmount: BigNumber; outputAmount: BigNumber }
    >;

    Minted(
      inputAmount?: null,
      outputAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { inputAmount: BigNumber; outputAmount: BigNumber }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "ProcessingThresholdUpdated(tuple,tuple)"(
      prevThreshold?: null,
      newTreshold?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        }
      ],
      {
        prevThreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
        newTreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
      }
    >;

    ProcessingThresholdUpdated(
      prevThreshold?: null,
      newTreshold?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        }
      ],
      {
        prevThreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
        newTreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
      }
    >;

    "Redeemed(uint256,uint256)"(
      suppliedTokenAmount?: null,
      outputAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { suppliedTokenAmount: BigNumber; outputAmount: BigNumber }
    >;

    Redeemed(
      suppliedTokenAmount?: null,
      outputAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { suppliedTokenAmount: BigNumber; outputAmount: BigNumber }
    >;

    "SlippageUpdated(tuple,tuple)"(
      prev?: null,
      current?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber },
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
      ],
      {
        prev: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
        current: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
      }
    >;

    SlippageUpdated(
      prev?: null,
      current?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber },
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
      ],
      {
        prev: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
        current: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
      }
    >;

    "StakingUpdated(address,address)"(
      beforeAddress?: null,
      afterAddress?: null
    ): TypedEventFilter<
      [string, string],
      { beforeAddress: string; afterAddress: string }
    >;

    StakingUpdated(
      beforeAddress?: null,
      afterAddress?: null
    ): TypedEventFilter<
      [string, string],
      { beforeAddress: string; afterAddress: string }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdrawal(address,uint256)"(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    Withdrawal(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "WithdrawnFromBatch(bytes32,uint256,address)"(
      batchId?: null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { batchId: string; amount: BigNumber; to: string }
    >;

    WithdrawnFromBatch(
      batchId?: null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { batchId: string; amount: BigNumber; to: string }
    >;
  };

  estimateGas: {
    acceptClientAccess(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    basicIssuanceModule(overrides?: CallOverrides): Promise<BigNumber>;

    batchStorage(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndStake(
      _batchId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFee(
      feeType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimForAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    currentMintBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    depositForMint(
      amount: BigNumberish,
      depositFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositForRedeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fees(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatch(batchId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantClientAccess(
      newClient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastMintedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,uint256,bool)"(
      _amount: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(uint256,int128,int128,uint256,bool)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatchTokens(overrides?: CallOverrides): Promise<BigNumber>;

    moveUnclaimedIntoCurrentBatch(
      batchIds: BytesLike[],
      shares: BigNumberish[],
      mint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    processingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "redeem(uint256,int128,int128,uint256)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256,uint256)"(
      _amount: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemBatchTokens(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBatchStorage(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slippage(overrides?: CallOverrides): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    token(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptClientAccess(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    basicIssuanceModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndStake(
      _batchId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(
      feeType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimForAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentMintBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRedeemBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositForMint(
      amount: BigNumberish,
      depositFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositForRedeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantClientAccess(
      newClient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastMintedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mint(uint256,uint256,bool)"(
      _amount: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256,int128,int128,uint256,bool)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minMintAmount: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatchTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveUnclaimedIntoCurrentBatch(
      batchIds: BytesLike[],
      shares: BigNumberish[],
      mint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processingThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256,int128,int128,uint256)"(
      _amount: BigNumberish,
      _fromIndex: BigNumberish,
      _toIndex: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256,uint256)"(
      _amount: BigNumberish,
      _minRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemBatchTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBatchStorage(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromBatch(bytes32,uint256,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromBatch(bytes32,uint256,address,address)"(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
