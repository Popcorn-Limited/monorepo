/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PopLockerInterface extends ethers.utils.Interface {
  functions: {
    "addReward(address,address,bool)": FunctionFragment;
    "approveRewardDistributor(address,address,bool)": FunctionFragment;
    "balanceAtEpochOf(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "boostPayment()": FunctionFragment;
    "boostRate()": FunctionFragment;
    "boostedSupply()": FunctionFragment;
    "checkpointEpoch()": FunctionFragment;
    "claimableRewards(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "denominator()": FunctionFragment;
    "epochCount()": FunctionFragment;
    "epochs(uint256)": FunctionFragment;
    "escrowDuration()": FunctionFragment;
    "findEpochId(uint256)": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "getRewardForDuration(address)": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "kickExpiredLocks(address)": FunctionFragment;
    "kickRewardEpochDelay()": FunctionFragment;
    "kickRewardPerEpoch()": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "lock(address,uint256,uint256)": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "lockedBalanceOf(address)": FunctionFragment;
    "lockedBalances(address)": FunctionFragment;
    "lockedSupply()": FunctionFragment;
    "maximumBoostPayment()": FunctionFragment;
    "name()": FunctionFragment;
    "nextBoostRate()": FunctionFragment;
    "nextMaximumBoostPayment()": FunctionFragment;
    "notifyRewardAmount(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "processExpiredLocks(bool)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardData(address)": FunctionFragment;
    "rewardDistributors(address,address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewardWeightOf(address)": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "rewardsEscrow()": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "setBoost(uint256,uint256,address)": FunctionFragment;
    "setEscrowDuration(uint256)": FunctionFragment;
    "setKickIncentive(uint256,uint256)": FunctionFragment;
    "setRewardsEscrow(address)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAtEpoch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userLocks(address,uint256)": FunctionFragment;
    "userRewardPerTokenPaid(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewardDistributor",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAtEpochOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "boostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "boostRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickExpiredLocks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardEpochDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumBoostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextBoostRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMaximumBoostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processExpiredLocks",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWeightOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoost",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEscrowDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKickIncentive",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsEscrow",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAtEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceAtEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boostRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardEpochDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumBoostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBoostRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMaximumBoostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEscrowDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKickIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;

  events: {
    "EscrowDurationUpdated(uint256,uint256)": EventFragment;
    "KickReward(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "Relocked(address,uint256)": EventFragment;
    "RewardAdded(address,uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "RewardsEscrowUpdated(address,address)": EventFragment;
    "Staked(address,uint256,uint256,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KickReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Relocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsEscrowUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type EscrowDurationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    _previousDuration: BigNumber;
    _newDuration: BigNumber;
  }
>;

export type KickRewardEvent = TypedEvent<
  [string, string, BigNumber] & {
    _user: string;
    _kicked: string;
    _reward: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RecoveredEvent = TypedEvent<
  [string, BigNumber] & { _token: string; _amount: BigNumber }
>;

export type RelockedEvent = TypedEvent<
  [string, BigNumber] & { _user: string; _amount: BigNumber }
>;

export type RewardAddedEvent = TypedEvent<
  [string, BigNumber] & { _token: string; _reward: BigNumber }
>;

export type RewardPaidEvent = TypedEvent<
  [string, string, BigNumber] & {
    _user: string;
    _rewardsToken: string;
    _reward: BigNumber;
  }
>;

export type RewardsEscrowUpdatedEvent = TypedEvent<
  [string, string] & { _previous: string; _new: string }
>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _user: string;
    _paidAmount: BigNumber;
    _lockedAmount: BigNumber;
    _boostedAmount: BigNumber;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber] & { _user: string; _amount: BigNumber }
>;

export class PopLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PopLockerInterface;

  functions: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        locked: BigNumber;
        boosted: BigNumber;
        nextUnlockIndex: number;
      }
    >;

    boostPayment(overrides?: CallOverrides): Promise<[string]>;

    boostRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpointEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
        userRewards: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    denominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { supply: BigNumber; date: number }>;

    escrowDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { epoch: BigNumber }>;

    getReward(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    kickExpiredLocks(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      }
    >;

    lockedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumBoostPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextBoostRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextMaximumBoostPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "processExpiredLocks(bool)"(
      _relock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "processExpiredLocks(bool,uint256,address)"(
      _relock: boolean,
      _spendRatio: BigNumberish,
      _withdrawTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, number, BigNumber] & {
        useBoost: boolean;
        periodFinish: number;
        rewardRate: BigNumber;
        lastUpdateTime: number;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsEscrow(overrides?: CallOverrides): Promise<[string]>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEscrowDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsEscrow(
      _rewardsEscrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      }
    >;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addReward(
    _rewardsToken: string,
    _distributor: string,
    _useBoost: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveRewardDistributor(
    _rewardsToken: string,
    _distributor: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceAtEpochOf(
    _epoch: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  balances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      locked: BigNumber;
      boosted: BigNumber;
      nextUnlockIndex: number;
    }
  >;

  boostPayment(overrides?: CallOverrides): Promise<string>;

  boostRate(overrides?: CallOverrides): Promise<BigNumber>;

  boostedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  checkpointEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableRewards(
    _account: string,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  decimals(overrides?: CallOverrides): Promise<number>;

  denominator(overrides?: CallOverrides): Promise<BigNumber>;

  epochCount(overrides?: CallOverrides): Promise<BigNumber>;

  epochs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { supply: BigNumber; date: number }>;

  escrowDuration(overrides?: CallOverrides): Promise<BigNumber>;

  findEpochId(
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReward(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  kickExpiredLocks(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

  kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimeRewardApplicable(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    _account: string,
    _amount: BigNumberish,
    _spendRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalances(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      })[]
    ] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: ([BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      })[];
    }
  >;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  maximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextBoostRate(overrides?: CallOverrides): Promise<BigNumber>;

  nextMaximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

  notifyRewardAmount(
    _rewardsToken: string,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "processExpiredLocks(bool)"(
    _relock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "processExpiredLocks(bool,uint256,address)"(
    _relock: boolean,
    _spendRatio: BigNumberish,
    _withdrawTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, number, BigNumber] & {
      useBoost: boolean;
      periodFinish: number;
      rewardRate: BigNumber;
      lastUpdateTime: number;
      rewardPerTokenStored: BigNumber;
    }
  >;

  rewardDistributors(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardPerToken(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewardWeightOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsEscrow(overrides?: CallOverrides): Promise<string>;

  setApprovals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoost(
    _max: BigNumberish,
    _rate: BigNumberish,
    _receivingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEscrowDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKickIncentive(
    _rate: BigNumberish,
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsEscrow(
    _rewardsEscrow: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAtEpoch(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userLocks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      amount: BigNumber;
      boosted: BigNumber;
      unlockTime: number;
    }
  >;

  userRewardPerTokenPaid(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        locked: BigNumber;
        boosted: BigNumber;
        nextUnlockIndex: number;
      }
    >;

    boostPayment(overrides?: CallOverrides): Promise<string>;

    boostRate(overrides?: CallOverrides): Promise<BigNumber>;

    boostedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointEpoch(overrides?: CallOverrides): Promise<void>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    decimals(overrides?: CallOverrides): Promise<number>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { supply: BigNumber; date: number }>;

    escrowDuration(overrides?: CallOverrides): Promise<BigNumber>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(_account: string, overrides?: CallOverrides): Promise<void>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    kickExpiredLocks(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      }
    >;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextBoostRate(overrides?: CallOverrides): Promise<BigNumber>;

    nextMaximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "processExpiredLocks(bool)"(
      _relock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "processExpiredLocks(bool,uint256,address)"(
      _relock: boolean,
      _spendRatio: BigNumberish,
      _withdrawTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, number, BigNumber] & {
        useBoost: boolean;
        periodFinish: number;
        rewardRate: BigNumber;
        lastUpdateTime: number;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsEscrow(overrides?: CallOverrides): Promise<string>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEscrowDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsEscrow(
      _rewardsEscrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      }
    >;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "EscrowDurationUpdated(uint256,uint256)"(
      _previousDuration?: null,
      _newDuration?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _previousDuration: BigNumber; _newDuration: BigNumber }
    >;

    EscrowDurationUpdated(
      _previousDuration?: null,
      _newDuration?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _previousDuration: BigNumber; _newDuration: BigNumber }
    >;

    "KickReward(address,address,uint256)"(
      _user?: string | null,
      _kicked?: string | null,
      _reward?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _kicked: string; _reward: BigNumber }
    >;

    KickReward(
      _user?: string | null,
      _kicked?: string | null,
      _reward?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _kicked: string; _reward: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Recovered(address,uint256)"(
      _token?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _amount: BigNumber }
    >;

    Recovered(
      _token?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _amount: BigNumber }
    >;

    "Relocked(address,uint256)"(
      _user?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _user: string; _amount: BigNumber }
    >;

    Relocked(
      _user?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _user: string; _amount: BigNumber }
    >;

    "RewardAdded(address,uint256)"(
      _token?: string | null,
      _reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _reward: BigNumber }
    >;

    RewardAdded(
      _token?: string | null,
      _reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _reward: BigNumber }
    >;

    "RewardPaid(address,address,uint256)"(
      _user?: string | null,
      _rewardsToken?: string | null,
      _reward?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _rewardsToken: string; _reward: BigNumber }
    >;

    RewardPaid(
      _user?: string | null,
      _rewardsToken?: string | null,
      _reward?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _user: string; _rewardsToken: string; _reward: BigNumber }
    >;

    "RewardsEscrowUpdated(address,address)"(
      _previous?: null,
      _new?: null
    ): TypedEventFilter<[string, string], { _previous: string; _new: string }>;

    RewardsEscrowUpdated(
      _previous?: null,
      _new?: null
    ): TypedEventFilter<[string, string], { _previous: string; _new: string }>;

    "Staked(address,uint256,uint256,uint256)"(
      _user?: string | null,
      _paidAmount?: null,
      _lockedAmount?: null,
      _boostedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _paidAmount: BigNumber;
        _lockedAmount: BigNumber;
        _boostedAmount: BigNumber;
      }
    >;

    Staked(
      _user?: string | null,
      _paidAmount?: null,
      _lockedAmount?: null,
      _boostedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _user: string;
        _paidAmount: BigNumber;
        _lockedAmount: BigNumber;
        _boostedAmount: BigNumber;
      }
    >;

    "Withdrawn(address,uint256)"(
      _user?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _user: string; _amount: BigNumber }
    >;

    Withdrawn(
      _user?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _user: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    boostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    boostRate(overrides?: CallOverrides): Promise<BigNumber>;

    boostedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    escrowDuration(overrides?: CallOverrides): Promise<BigNumber>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    kickExpiredLocks(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextBoostRate(overrides?: CallOverrides): Promise<BigNumber>;

    nextMaximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "processExpiredLocks(bool)"(
      _relock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "processExpiredLocks(bool,uint256,address)"(
      _relock: boolean,
      _spendRatio: BigNumberish,
      _withdrawTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEscrowDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsEscrow(
      _rewardsEscrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpointEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    denominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrowDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kickExpiredLocks(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kickRewardEpochDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kickRewardPerEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumBoostPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextBoostRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextMaximumBoostPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "processExpiredLocks(bool)"(
      _relock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "processExpiredLocks(bool,uint256,address)"(
      _relock: boolean,
      _spendRatio: BigNumberish,
      _withdrawTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEscrowDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsEscrow(
      _rewardsEscrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
