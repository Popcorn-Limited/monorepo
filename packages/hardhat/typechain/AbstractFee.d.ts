/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AbstractFeeInterface extends ethers.utils.Interface {
  functions: {
    "claimFee(bytes32)": FunctionFragment;
    "feeTypes(uint256)": FunctionFragment;
    "fees(bytes32)": FunctionFragment;
    "setFee(bytes32,uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimFee", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "feeTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BytesLike, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;

  events: {
    "FeeUpdated(bytes32,uint256,address,address)": EventFragment;
    "FeesClaimed(bytes32,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesClaimed"): EventFragment;
}

export type FeeUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    feeType: string;
    newRedemptionFee: BigNumber;
    newFeeRecipient: string;
    toke: string;
  }
>;

export type FeesClaimedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    feeType: string;
    recipient: string;
    amount: BigNumber;
    token: string;
  }
>;

export class AbstractFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AbstractFeeInterface;

  functions: {
    claimFee(
      feeType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    fees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        accumulated: BigNumber;
        bps: BigNumber;
        recipient: string;
        token: string;
      }
    >;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimFee(
    feeType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  fees(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      accumulated: BigNumber;
      bps: BigNumber;
      recipient: string;
      token: string;
    }
  >;

  setFee(
    feeType: BytesLike,
    bps: BigNumberish,
    recipient: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFee(feeType: BytesLike, overrides?: CallOverrides): Promise<void>;

    feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    fees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        accumulated: BigNumber;
        bps: BigNumber;
        recipient: string;
        token: string;
      }
    >;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeUpdated(bytes32,uint256,address,address)"(
      feeType?: null,
      newRedemptionFee?: null,
      newFeeRecipient?: null,
      toke?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        feeType: string;
        newRedemptionFee: BigNumber;
        newFeeRecipient: string;
        toke: string;
      }
    >;

    FeeUpdated(
      feeType?: null,
      newRedemptionFee?: null,
      newFeeRecipient?: null,
      toke?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        feeType: string;
        newRedemptionFee: BigNumber;
        newFeeRecipient: string;
        toke: string;
      }
    >;

    "FeesClaimed(bytes32,address,uint256,address)"(
      feeType?: null,
      recipient?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { feeType: string; recipient: string; amount: BigNumber; token: string }
    >;

    FeesClaimed(
      feeType?: null,
      recipient?: null,
      amount?: null,
      token?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { feeType: string; recipient: string; amount: BigNumber; token: string }
    >;
  };

  estimateGas: {
    claimFee(
      feeType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fees(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFee(
      feeType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fees(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      feeType: BytesLike,
      bps: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
