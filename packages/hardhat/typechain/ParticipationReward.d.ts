/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ParticipationRewardInterface extends ethers.utils.Interface {
  functions: {
    "addControllerContract(bytes32,address)": FunctionFragment;
    "addShares(bytes32,bytes32,address,uint256)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "claimRewards(uint256[])": FunctionFragment;
    "contractRegistry()": FunctionFragment;
    "contributeReward(uint256)": FunctionFragment;
    "controllerContracts(bytes32)": FunctionFragment;
    "getUserVaults(address)": FunctionFragment;
    "getVaultStatus(bytes32)": FunctionFragment;
    "hasClaim(bytes32,address)": FunctionFragment;
    "initializeVault(bytes32,bytes32,uint256)": FunctionFragment;
    "isClaimable(bytes32,address)": FunctionFragment;
    "openVault(bytes32,bytes32)": FunctionFragment;
    "rewardBalance()": FunctionFragment;
    "rewardBudgets(bytes32)": FunctionFragment;
    "rewardsEnabled(bytes32)": FunctionFragment;
    "setRewardsBudget(bytes32,uint256)": FunctionFragment;
    "toggleRewards(bytes32)": FunctionFragment;
    "totalVaultsBudget()": FunctionFragment;
    "userVaults(address,uint256)": FunctionFragment;
    "vaults(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addControllerContract",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addShares",
    values: [BytesLike, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributeReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerContracts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVaults",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaim",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeVault",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimable",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openVault",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBudgets",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsEnabled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsBudget",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleRewards",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVaultsBudget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userVaults",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "addControllerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBudgets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVaultsBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {
    "ControllerContractAdded(bytes32,address)": EventFragment;
    "RewardBalanceIncreased(address,uint256)": EventFragment;
    "RewardBudgetChanged(bytes32,uint256)": EventFragment;
    "RewardClaimed(bytes32,address,uint256)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "RewardsToggled(bytes32,bool,bool)": EventFragment;
    "SharesAdded(bytes32,address,uint256)": EventFragment;
    "VaultClosed(bytes32)": EventFragment;
    "VaultInitialized(bytes32)": EventFragment;
    "VaultOpened(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardBalanceIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardBudgetChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultOpened"): EventFragment;
}

export type ControllerContractAddedEvent = TypedEvent<
  [string, string] & { _contractName: string; _contract: string }
>;

export type RewardBalanceIncreasedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type RewardBudgetChangedEvent = TypedEvent<
  [string, BigNumber] & { _contractName: string; amount: BigNumber }
>;

export type RewardClaimedEvent = TypedEvent<
  [string, string, BigNumber] & {
    vaultId: string;
    _account: string;
    amount: BigNumber;
  }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber] & { _account: string; amount: BigNumber }
>;

export type RewardsToggledEvent = TypedEvent<
  [string, boolean, boolean] & {
    _contractName: string;
    prevState: boolean;
    newState: boolean;
  }
>;

export type SharesAddedEvent = TypedEvent<
  [string, string, BigNumber] & {
    _vaultId: string;
    _account: string;
    _shares: BigNumber;
  }
>;

export type VaultClosedEvent = TypedEvent<[string] & { vaultId: string }>;

export type VaultInitializedEvent = TypedEvent<[string] & { vaultId: string }>;

export type VaultOpenedEvent = TypedEvent<[string] & { vaultId: string }>;

export class ParticipationReward extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ParticipationRewardInterface;

  functions: {
    addControllerContract(
      _contractName: BytesLike,
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addShares(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _account: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      _indices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    contributeReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controllerContracts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserVaults(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getVaultStatus(
      _vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasClaim(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializeVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClaimable(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    openVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardBudgets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setRewardsBudget(
      _contractName: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleRewards(
      _contractName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalVaultsBudget(overrides?: CallOverrides): Promise<[BigNumber]>;

    userVaults(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vaults(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        status: number;
        endTime: BigNumber;
        shares: BigNumber;
        tokenBalance: BigNumber;
      }
    >;
  };

  addControllerContract(
    _contractName: BytesLike,
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addShares(
    _contractName: BytesLike,
    _vaultId: BytesLike,
    _account: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    _indices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  contributeReward(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controllerContracts(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserVaults(_account: string, overrides?: CallOverrides): Promise<string[]>;

  getVaultStatus(
    _vaultId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  hasClaim(
    _vaultId: BytesLike,
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializeVault(
    _contractName: BytesLike,
    _vaultId: BytesLike,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClaimable(
    _vaultId: BytesLike,
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  openVault(
    _contractName: BytesLike,
    _vaultId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

  rewardBudgets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  rewardsEnabled(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  setRewardsBudget(
    _contractName: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleRewards(
    _contractName: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalVaultsBudget(overrides?: CallOverrides): Promise<BigNumber>;

  userVaults(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  vaults(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      status: number;
      endTime: BigNumber;
      shares: BigNumber;
      tokenBalance: BigNumber;
    }
  >;

  callStatic: {
    addControllerContract(
      _contractName: BytesLike,
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addShares(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _account: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimRewards(
      _indices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    contributeReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    controllerContracts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserVaults(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVaultStatus(
      _vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    hasClaim(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isClaimable(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    openVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBudgets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRewardsBudget(
      _contractName: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleRewards(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalVaultsBudget(overrides?: CallOverrides): Promise<BigNumber>;

    userVaults(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vaults(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        status: number;
        endTime: BigNumber;
        shares: BigNumber;
        tokenBalance: BigNumber;
      }
    >;
  };

  filters: {
    "ControllerContractAdded(bytes32,address)"(
      _contractName?: null,
      _contract?: null
    ): TypedEventFilter<
      [string, string],
      { _contractName: string; _contract: string }
    >;

    ControllerContractAdded(
      _contractName?: null,
      _contract?: null
    ): TypedEventFilter<
      [string, string],
      { _contractName: string; _contract: string }
    >;

    "RewardBalanceIncreased(address,uint256)"(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    RewardBalanceIncreased(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "RewardBudgetChanged(bytes32,uint256)"(
      _contractName?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _contractName: string; amount: BigNumber }
    >;

    RewardBudgetChanged(
      _contractName?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _contractName: string; amount: BigNumber }
    >;

    "RewardClaimed(bytes32,address,uint256)"(
      vaultId?: null,
      _account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vaultId: string; _account: string; amount: BigNumber }
    >;

    RewardClaimed(
      vaultId?: null,
      _account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vaultId: string; _account: string; amount: BigNumber }
    >;

    "RewardsClaimed(address,uint256)"(
      _account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _account: string; amount: BigNumber }
    >;

    RewardsClaimed(
      _account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _account: string; amount: BigNumber }
    >;

    "RewardsToggled(bytes32,bool,bool)"(
      _contractName?: null,
      prevState?: null,
      newState?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { _contractName: string; prevState: boolean; newState: boolean }
    >;

    RewardsToggled(
      _contractName?: null,
      prevState?: null,
      newState?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { _contractName: string; prevState: boolean; newState: boolean }
    >;

    "SharesAdded(bytes32,address,uint256)"(
      _vaultId?: null,
      _account?: null,
      _shares?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _vaultId: string; _account: string; _shares: BigNumber }
    >;

    SharesAdded(
      _vaultId?: null,
      _account?: null,
      _shares?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _vaultId: string; _account: string; _shares: BigNumber }
    >;

    "VaultClosed(bytes32)"(
      vaultId?: null
    ): TypedEventFilter<[string], { vaultId: string }>;

    VaultClosed(
      vaultId?: null
    ): TypedEventFilter<[string], { vaultId: string }>;

    "VaultInitialized(bytes32)"(
      vaultId?: null
    ): TypedEventFilter<[string], { vaultId: string }>;

    VaultInitialized(
      vaultId?: null
    ): TypedEventFilter<[string], { vaultId: string }>;

    "VaultOpened(bytes32)"(
      vaultId?: null
    ): TypedEventFilter<[string], { vaultId: string }>;

    VaultOpened(
      vaultId?: null
    ): TypedEventFilter<[string], { vaultId: string }>;
  };

  estimateGas: {
    addControllerContract(
      _contractName: BytesLike,
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addShares(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _account: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      _indices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    contributeReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controllerContracts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVaults(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultStatus(
      _vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaim(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClaimable(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBudgets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardsBudget(
      _contractName: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleRewards(
      _contractName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalVaultsBudget(overrides?: CallOverrides): Promise<BigNumber>;

    userVaults(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addControllerContract(
      _contractName: BytesLike,
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addShares(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _account: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _indices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributeReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controllerContracts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVaults(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultStatus(
      _vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaim(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClaimable(
      _vaultId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openVault(
      _contractName: BytesLike,
      _vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardBudgets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardsBudget(
      _contractName: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleRewards(
      _contractName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalVaultsBudget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userVaults(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
