/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KeeperIncentiveHelperInterface extends ethers.utils.Interface {
  functions: {
    "contractName()": FunctionFragment;
    "incentivisedFunction(uint8)": FunctionFragment;
    "incentivisedFunctionLegacy()": FunctionFragment;
    "keeperIncentive()": FunctionFragment;
    "tipIncentive(address,address,uint256,uint256)": FunctionFragment;
    "tipIncentiveWithBurn(address,address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentivisedFunction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivisedFunctionLegacy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keeperIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tipIncentive",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tipIncentiveWithBurn",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivisedFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivisedFunctionLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tipIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tipIncentiveWithBurn",
    data: BytesLike
  ): Result;

  events: {
    "FunctionCalled(address)": EventFragment;
    "Tipped(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FunctionCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tipped"): EventFragment;
}

export type FunctionCalledEvent = TypedEvent<[string] & { account: string }>;

export type TippedEvent = TypedEvent<[string] & { account: string }>;

export class KeeperIncentiveHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KeeperIncentiveHelperInterface;

  functions: {
    contractName(overrides?: CallOverrides): Promise<[string]>;

    incentivisedFunction(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    incentivisedFunctionLegacy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeperIncentive(overrides?: CallOverrides): Promise<[string]>;

    tipIncentive(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tipIncentiveWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  contractName(overrides?: CallOverrides): Promise<string>;

  incentivisedFunction(
    i: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  incentivisedFunctionLegacy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeperIncentive(overrides?: CallOverrides): Promise<string>;

  tipIncentive(
    _rewardToken: string,
    _keeper: string,
    _i: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tipIncentiveWithBurn(
    _rewardToken: string,
    _keeper: string,
    _i: BigNumberish,
    _amount: BigNumberish,
    _burnPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractName(overrides?: CallOverrides): Promise<string>;

    incentivisedFunction(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    incentivisedFunctionLegacy(overrides?: CallOverrides): Promise<void>;

    keeperIncentive(overrides?: CallOverrides): Promise<string>;

    tipIncentive(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tipIncentiveWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FunctionCalled(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    FunctionCalled(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "Tipped(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Tipped(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    incentivisedFunction(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    incentivisedFunctionLegacy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeperIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    tipIncentive(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tipIncentiveWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentivisedFunction(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    incentivisedFunctionLegacy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeperIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tipIncentive(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tipIncentiveWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
