/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ButterWhaleProcessingInterface extends ethers.utils.Interface {
  functions: {
    "claimRedemptionFee()": FunctionFragment;
    "contractName()": FunctionFragment;
    "contractRegistry()": FunctionFragment;
    "curvePoolTokenPairs(address)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getMinAmount3CrvFromRedeem(uint256,uint256)": FunctionFragment;
    "getMinAmountToMint(uint256,uint256,uint256)": FunctionFragment;
    "mint(uint256,uint256,bool)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverLeftover(address,uint256)": FunctionFragment;
    "redeem(uint256,uint256)": FunctionFragment;
    "redemptionFeeRate()": FunctionFragment;
    "redemptionFees()": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "setBasicIssuanceModule()": FunctionFragment;
    "setCurvePoolTokenPairs(address[],tuple[])": FunctionFragment;
    "setRedemptionFee(uint256,address)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "setToken()": FunctionFragment;
    "staking()": FunctionFragment;
    "sweethearts(address)": FunctionFragment;
    "threeCrv()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateSweetheart(address,bool)": FunctionFragment;
    "valueOf3Crv(uint256)": FunctionFragment;
    "valueOfComponents(address[],uint256[])": FunctionFragment;
    "zapMint(uint256[3],uint256,uint256,bool)": FunctionFragment;
    "zapRedeem(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRedemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curvePoolTokenPairs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinAmount3CrvFromRedeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinAmountToMint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverLeftover",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBasicIssuanceModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurvePoolTokenPairs",
    values: [string[], { curveMetaPool: string; crvLPToken: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setStaking", values: [string]): string;
  encodeFunctionData(functionFragment: "setToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweethearts", values: [string]): string;
  encodeFunctionData(functionFragment: "threeCrv", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateSweetheart",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOf3Crv",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfComponents",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "zapMint",
    values: [
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapRedeem",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePoolTokenPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinAmount3CrvFromRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinAmountToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverLeftover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBasicIssuanceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurvePoolTokenPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweethearts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threeCrv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSweetheart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOf3Crv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zapMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapRedeem", data: BytesLike): Result;

  events: {
    "CurveTokenPairsUpdated(address[],tuple[])": EventFragment;
    "Minted(address,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Redeemed(address,uint256,uint256)": EventFragment;
    "RedemptionFeeUpdated(uint256,address)": EventFragment;
    "StakingUpdated(address,address)": EventFragment;
    "SweetheartUpdated(address,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
    "ZapMinted(address,uint256,uint256)": EventFragment;
    "ZapRedeemed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurveTokenPairsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweetheartUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapRedeemed"): EventFragment;
}

export type CurveTokenPairsUpdatedEvent = TypedEvent<
  [
    string[],
    ([string, string] & { curveMetaPool: string; crvLPToken: string })[]
  ] & {
    yTokenAddresses: string[];
    curveTokenPairs: ([string, string] & {
      curveMetaPool: string;
      crvLPToken: string;
    })[];
  }
>;

export type MintedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    amount: BigNumber;
    butterAmount: BigNumber;
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    amount: BigNumber;
    claimableTokenBalance: BigNumber;
  }
>;

export type RedemptionFeeUpdatedEvent = TypedEvent<
  [BigNumber, string] & { newRedemptionFee: BigNumber; newFeeRecipient: string }
>;

export type StakingUpdatedEvent = TypedEvent<
  [string, string] & { beforeAddress: string; afterAddress: string }
>;

export type SweetheartUpdatedEvent = TypedEvent<
  [string, boolean] & { sweetheart: string; isSweeheart: boolean }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type ZapMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    mintAmount: BigNumber;
    butterAmount: BigNumber;
  }
>;

export type ZapRedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    redeemAmount: BigNumber;
    claimableTokenBalance: BigNumber;
  }
>;

export class ButterWhaleProcessing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ButterWhaleProcessingInterface;

  functions: {
    claimRedemptionFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { curveMetaPool: string; crvLPToken: string }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redemptionFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    redemptionFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBasicIssuanceModule(overrides?: CallOverrides): Promise<[string]>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(overrides?: CallOverrides): Promise<[string]>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    sweethearts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    threeCrv(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zapMint(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _min_3crv_amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapRedeem(
      _amount: BigNumberish,
      _stableCoinIndex: BigNumberish,
      _min_stable_amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRedemptionFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractName(overrides?: CallOverrides): Promise<string>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  curvePoolTokenPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { curveMetaPool: string; crvLPToken: string }>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getMinAmount3CrvFromRedeem(
    _valueOfComponents: BigNumberish,
    _slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinAmountToMint(
    _valueOfBatch: BigNumberish,
    _valueOfComponentsPerUnit: BigNumberish,
    _slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    _amount: BigNumberish,
    _slippage: BigNumberish,
    _stake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverLeftover(
    _yTokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _amount: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redemptionFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  redemptionFees(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBasicIssuanceModule(overrides?: CallOverrides): Promise<string>;

  setCurvePoolTokenPairs(
    _yTokenAddresses: string[],
    _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    _feeRate: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(overrides?: CallOverrides): Promise<string>;

  staking(overrides?: CallOverrides): Promise<string>;

  sweethearts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  threeCrv(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSweetheart(
    _sweetheart: string,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  valueOf3Crv(
    _units: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueOfComponents(
    _tokenAddresses: string[],
    _quantities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  zapMint(
    _amounts: [BigNumberish, BigNumberish, BigNumberish],
    _min_3crv_amount: BigNumberish,
    _slippage: BigNumberish,
    _stake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapRedeem(
    _amount: BigNumberish,
    _stableCoinIndex: BigNumberish,
    _min_stable_amount: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRedemptionFee(overrides?: CallOverrides): Promise<void>;

    contractName(overrides?: CallOverrides): Promise<string>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { curveMetaPool: string; crvLPToken: string }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionFees(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    setBasicIssuanceModule(overrides?: CallOverrides): Promise<string>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaking(_staking: string, overrides?: CallOverrides): Promise<void>;

    setToken(overrides?: CallOverrides): Promise<string>;

    staking(overrides?: CallOverrides): Promise<string>;

    sweethearts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    threeCrv(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapMint(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _min_3crv_amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    zapRedeem(
      _amount: BigNumberish,
      _stableCoinIndex: BigNumberish,
      _min_stable_amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CurveTokenPairsUpdated(address[],tuple[])"(
      yTokenAddresses?: null,
      curveTokenPairs?: null
    ): TypedEventFilter<
      [
        string[],
        ([string, string] & { curveMetaPool: string; crvLPToken: string })[]
      ],
      {
        yTokenAddresses: string[];
        curveTokenPairs: ([string, string] & {
          curveMetaPool: string;
          crvLPToken: string;
        })[];
      }
    >;

    CurveTokenPairsUpdated(
      yTokenAddresses?: null,
      curveTokenPairs?: null
    ): TypedEventFilter<
      [
        string[],
        ([string, string] & { curveMetaPool: string; crvLPToken: string })[]
      ],
      {
        yTokenAddresses: string[];
        curveTokenPairs: ([string, string] & {
          curveMetaPool: string;
          crvLPToken: string;
        })[];
      }
    >;

    "Minted(address,uint256,uint256)"(
      account?: null,
      amount?: null,
      butterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; butterAmount: BigNumber }
    >;

    Minted(
      account?: null,
      amount?: null,
      butterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; butterAmount: BigNumber }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Redeemed(address,uint256,uint256)"(
      account?: null,
      amount?: null,
      claimableTokenBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; claimableTokenBalance: BigNumber }
    >;

    Redeemed(
      account?: null,
      amount?: null,
      claimableTokenBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; claimableTokenBalance: BigNumber }
    >;

    "RedemptionFeeUpdated(uint256,address)"(
      newRedemptionFee?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { newRedemptionFee: BigNumber; newFeeRecipient: string }
    >;

    RedemptionFeeUpdated(
      newRedemptionFee?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { newRedemptionFee: BigNumber; newFeeRecipient: string }
    >;

    "StakingUpdated(address,address)"(
      beforeAddress?: null,
      afterAddress?: null
    ): TypedEventFilter<
      [string, string],
      { beforeAddress: string; afterAddress: string }
    >;

    StakingUpdated(
      beforeAddress?: null,
      afterAddress?: null
    ): TypedEventFilter<
      [string, string],
      { beforeAddress: string; afterAddress: string }
    >;

    "SweetheartUpdated(address,bool)"(
      sweetheart?: null,
      isSweeheart?: null
    ): TypedEventFilter<
      [string, boolean],
      { sweetheart: string; isSweeheart: boolean }
    >;

    SweetheartUpdated(
      sweetheart?: null,
      isSweeheart?: null
    ): TypedEventFilter<
      [string, boolean],
      { sweetheart: string; isSweeheart: boolean }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "ZapMinted(address,uint256,uint256)"(
      account?: null,
      mintAmount?: null,
      butterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; mintAmount: BigNumber; butterAmount: BigNumber }
    >;

    ZapMinted(
      account?: null,
      mintAmount?: null,
      butterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; mintAmount: BigNumber; butterAmount: BigNumber }
    >;

    "ZapRedeemed(address,uint256,uint256)"(
      account?: null,
      redeemAmount?: null,
      claimableTokenBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        account: string;
        redeemAmount: BigNumber;
        claimableTokenBalance: BigNumber;
      }
    >;

    ZapRedeemed(
      account?: null,
      redeemAmount?: null,
      claimableTokenBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        account: string;
        redeemAmount: BigNumber;
        claimableTokenBalance: BigNumber;
      }
    >;
  };

  estimateGas: {
    claimRedemptionFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redemptionFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionFees(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBasicIssuanceModule(overrides?: CallOverrides): Promise<BigNumber>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(overrides?: CallOverrides): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    sweethearts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    threeCrv(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapMint(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _min_3crv_amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapRedeem(
      _amount: BigNumberish,
      _stableCoinIndex: BigNumberish,
      _min_stable_amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRedemptionFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redemptionFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBasicIssuanceModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweethearts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threeCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zapMint(
      _amounts: [BigNumberish, BigNumberish, BigNumberish],
      _min_3crv_amount: BigNumberish,
      _slippage: BigNumberish,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapRedeem(
      _amount: BigNumberish,
      _stableCoinIndex: BigNumberish,
      _min_stable_amount: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
