/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AbstractViewableBatchStorageInterface extends ethers.utils.Interface {
  functions: {
    "batchStorage()": FunctionFragment;
    "getAccountBalance(bytes32,address)": FunctionFragment;
    "getAccountBatchIds(address)": FunctionFragment;
    "getAccountBatches(address)": FunctionFragment;
    "getBatch(bytes32)": FunctionFragment;
    "getBatchType(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBatchIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBatches",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBatch", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBatchType",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBatchIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchType",
    data: BytesLike
  ): Result;

  events: {};
}

export class AbstractViewableBatchStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AbstractViewableBatchStorageInterface;

  functions: {
    batchStorage(overrides?: CallOverrides): Promise<[string]>;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          id: string;
          batchType: number;
          batchId: string;
          claimable: boolean;
          unclaimedShares: BigNumber;
          sourceTokenBalance: BigNumber;
          targetTokenBalance: BigNumber;
          sourceToken: string;
          targetToken: string;
          owner: string;
        }
      ]
    >;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  batchStorage(overrides?: CallOverrides): Promise<string>;

  getAccountBalance(
    _id: BytesLike,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountBatchIds(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAccountBatches(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBatch(
    batchId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      id: string;
      batchType: number;
      batchId: string;
      claimable: boolean;
      unclaimedShares: BigNumber;
      sourceTokenBalance: BigNumber;
      targetTokenBalance: BigNumber;
      sourceToken: string;
      targetToken: string;
      owner: string;
    }
  >;

  getBatchType(batchId: BytesLike, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    batchStorage(overrides?: CallOverrides): Promise<string>;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        id: string;
        batchType: number;
        batchId: string;
        claimable: boolean;
        unclaimedShares: BigNumber;
        sourceTokenBalance: BigNumber;
        targetTokenBalance: BigNumber;
        sourceToken: string;
        targetToken: string;
        owner: string;
      }
    >;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    batchStorage(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatch(batchId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountBalance(
      _id: BytesLike,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBatchIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatch(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchType(
      batchId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
