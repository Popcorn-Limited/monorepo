/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ButterFeeConverterInterface extends ethers.utils.Interface {
  functions: {
    "BPS_DENOMINATOR()": FunctionFragment;
    "KEEPER_INCENTIVE()": FunctionFragment;
    "accrueFee()": FunctionFragment;
    "butter()": FunctionFragment;
    "contractName()": FunctionFragment;
    "keeperTip()": FunctionFragment;
    "maxSlippage()": FunctionFragment;
    "preferredStableCoinIndex()": FunctionFragment;
    "scaleValue(uint256,uint256)": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "setKeeperTip(uint256)": FunctionFragment;
    "setMaxSlippage(uint256)": FunctionFragment;
    "setPreferredStableCoinIndex(int128)": FunctionFragment;
    "streamingFeeModule()": FunctionFragment;
    "threeCRV()": FunctionFragment;
    "threePool()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_INCENTIVE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accrueFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "butter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeperTip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preferredStableCoinIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaleValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeperTip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreferredStableCoinIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "streamingFeeModule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "threeCRV", values?: undefined): string;
  encodeFunctionData(functionFragment: "threePool", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_INCENTIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accrueFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "butter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeperTip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preferredStableCoinIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scaleValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeeperTip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreferredStableCoinIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamingFeeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threeCRV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threePool", data: BytesLike): Result;

  events: {
    "FeeTransferredToRewardsManager(address,int128,uint256,uint256,uint256)": EventFragment;
    "KeeperConfigUpdated(tuple,tuple)": EventFragment;
    "KeeperTipUpdated(uint256,uint256)": EventFragment;
    "MaxSlippageUpdated(uint256,uint256)": EventFragment;
    "PreferredStableCoinIndexUpdated(int128,int128)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "FeeTransferredToRewardsManager"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperTipUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSlippageUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PreferredStableCoinIndexUpdated"
  ): EventFragment;
}

export type FeeTransferredToRewardsManagerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    keeper: string;
    preferredStableCoinIndex: BigNumber;
    threeCrvAmount: BigNumber;
    keeperTip: BigNumber;
    stableCoinAmount: BigNumber;
  }
>;

export type KeeperConfigUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    },
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    }
  ] & {
    oldConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
    newConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
  }
>;

export type KeeperTipUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldKeeperTip: BigNumber; newKeeperTip: BigNumber }
>;

export type MaxSlippageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldSlippage: BigNumber; newSlippage: BigNumber }
>;

export type PreferredStableCoinIndexUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldIndex: BigNumber; newIndex: BigNumber }
>;

export class ButterFeeConverter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ButterFeeConverterInterface;

  functions: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<[string]>;

    accrueFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    butter(overrides?: CallOverrides): Promise<[string]>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    keeperTip(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    preferredStableCoinIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    scaleValue(
      value: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeperTip(
      _newKeeperTip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSlippage(
      _newSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPreferredStableCoinIndex(
      _newIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    streamingFeeModule(overrides?: CallOverrides): Promise<[string]>;

    threeCRV(overrides?: CallOverrides): Promise<[string]>;

    threePool(overrides?: CallOverrides): Promise<[string]>;
  };

  BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;

  accrueFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  butter(overrides?: CallOverrides): Promise<string>;

  contractName(overrides?: CallOverrides): Promise<string>;

  keeperTip(overrides?: CallOverrides): Promise<BigNumber>;

  maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  preferredStableCoinIndex(overrides?: CallOverrides): Promise<BigNumber>;

  scaleValue(
    value: BigNumberish,
    decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setApprovals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeperTip(
    _newKeeperTip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSlippage(
    _newSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPreferredStableCoinIndex(
    _newIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  streamingFeeModule(overrides?: CallOverrides): Promise<string>;

  threeCRV(overrides?: CallOverrides): Promise<string>;

  threePool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;

    accrueFee(overrides?: CallOverrides): Promise<void>;

    butter(overrides?: CallOverrides): Promise<string>;

    contractName(overrides?: CallOverrides): Promise<string>;

    keeperTip(overrides?: CallOverrides): Promise<BigNumber>;

    maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    preferredStableCoinIndex(overrides?: CallOverrides): Promise<BigNumber>;

    scaleValue(
      value: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    setKeeperTip(
      _newKeeperTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSlippage(
      _newSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPreferredStableCoinIndex(
      _newIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    streamingFeeModule(overrides?: CallOverrides): Promise<string>;

    threeCRV(overrides?: CallOverrides): Promise<string>;

    threePool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FeeTransferredToRewardsManager(address,int128,uint256,uint256,uint256)"(
      keeper?: string | null,
      preferredStableCoinIndex?: null,
      threeCrvAmount?: null,
      keeperTip?: null,
      stableCoinAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        keeper: string;
        preferredStableCoinIndex: BigNumber;
        threeCrvAmount: BigNumber;
        keeperTip: BigNumber;
        stableCoinAmount: BigNumber;
      }
    >;

    FeeTransferredToRewardsManager(
      keeper?: string | null,
      preferredStableCoinIndex?: null,
      threeCrvAmount?: null,
      keeperTip?: null,
      stableCoinAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        keeper: string;
        preferredStableCoinIndex: BigNumber;
        threeCrvAmount: BigNumber;
        keeperTip: BigNumber;
        stableCoinAmount: BigNumber;
      }
    >;

    "KeeperConfigUpdated(tuple,tuple)"(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;

    KeeperConfigUpdated(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;

    "KeeperTipUpdated(uint256,uint256)"(
      oldKeeperTip?: null,
      newKeeperTip?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldKeeperTip: BigNumber; newKeeperTip: BigNumber }
    >;

    KeeperTipUpdated(
      oldKeeperTip?: null,
      newKeeperTip?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldKeeperTip: BigNumber; newKeeperTip: BigNumber }
    >;

    "MaxSlippageUpdated(uint256,uint256)"(
      oldSlippage?: null,
      newSlippage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldSlippage: BigNumber; newSlippage: BigNumber }
    >;

    MaxSlippageUpdated(
      oldSlippage?: null,
      newSlippage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldSlippage: BigNumber; newSlippage: BigNumber }
    >;

    "PreferredStableCoinIndexUpdated(int128,int128)"(
      oldIndex?: null,
      newIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldIndex: BigNumber; newIndex: BigNumber }
    >;

    PreferredStableCoinIndexUpdated(
      oldIndex?: null,
      newIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldIndex: BigNumber; newIndex: BigNumber }
    >;
  };

  estimateGas: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    accrueFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    butter(overrides?: CallOverrides): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    keeperTip(overrides?: CallOverrides): Promise<BigNumber>;

    maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    preferredStableCoinIndex(overrides?: CallOverrides): Promise<BigNumber>;

    scaleValue(
      value: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeperTip(
      _newKeeperTip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSlippage(
      _newSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPreferredStableCoinIndex(
      _newIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    streamingFeeModule(overrides?: CallOverrides): Promise<BigNumber>;

    threeCRV(overrides?: CallOverrides): Promise<BigNumber>;

    threePool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    butter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeperTip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preferredStableCoinIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaleValue(
      value: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeperTip(
      _newKeeperTip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSlippage(
      _newSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPreferredStableCoinIndex(
      _newIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    streamingFeeModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threeCRV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
