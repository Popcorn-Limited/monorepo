/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RewardsEscrowInterface extends ethers.utils.Interface {
  functions: {
    "POP()": FunctionFragment;
    "addAuthorizedContract(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "claimReward(bytes32)": FunctionFragment;
    "claimRewards(bytes32[])": FunctionFragment;
    "escrowIdsByAddress(address,uint256)": FunctionFragment;
    "escrows(bytes32)": FunctionFragment;
    "getClaimableAmount(bytes32)": FunctionFragment;
    "getEscrowIdsByUser(address)": FunctionFragment;
    "getEscrows(bytes32[])": FunctionFragment;
    "isClaimable(bytes32)": FunctionFragment;
    "lock(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAuthorizedContract(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "POP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowIdsByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowIdsByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrows",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "POP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowIdsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowIdsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEscrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddAuthorizedContract(address)": EventFragment;
    "Locked(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveAuthorizedContract(address)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "TokenAdded(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAuthorizedContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAuthorizedContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
}

export type AddAuthorizedContractEvent = TypedEvent<
  [string] & { _contract: string }
>;

export type LockedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveAuthorizedContractEvent = TypedEvent<
  [string] & { _contract: string }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type TokenAddedEvent = TypedEvent<
  [string, BigNumber] & { token: string; index: BigNumber }
>;

export class RewardsEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsEscrowInterface;

  functions: {
    POP(overrides?: CallOverrides): Promise<[string]>;

    addAuthorizedContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    claimReward(
      _escrowId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      _escrowIdsByAddress: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escrowIdsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    escrows(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        start: BigNumber;
        lastUpdateTime: BigNumber;
        end: BigNumber;
        initialBalance: BigNumber;
        balance: BigNumber;
        account: string;
      }
    >;

    getClaimableAmount(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEscrowIdsByUser(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getEscrows(
      _escrowIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          start: BigNumber;
          lastUpdateTime: BigNumber;
          end: BigNumber;
          initialBalance: BigNumber;
          balance: BigNumber;
          account: string;
        })[]
      ]
    >;

    isClaimable(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAuthorizedContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  POP(overrides?: CallOverrides): Promise<string>;

  addAuthorizedContract(
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  claimReward(
    _escrowId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    _escrowIdsByAddress: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escrowIdsByAddress(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  escrows(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      start: BigNumber;
      lastUpdateTime: BigNumber;
      end: BigNumber;
      initialBalance: BigNumber;
      balance: BigNumber;
      account: string;
    }
  >;

  getClaimableAmount(
    _escrowId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEscrowIdsByUser(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEscrows(
    _escrowIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      start: BigNumber;
      lastUpdateTime: BigNumber;
      end: BigNumber;
      initialBalance: BigNumber;
      balance: BigNumber;
      account: string;
    })[]
  >;

  isClaimable(
    _escrowId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(
    _account: string,
    _amount: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAuthorizedContract(
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    POP(overrides?: CallOverrides): Promise<string>;

    addAuthorizedContract(
      _staking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    claimReward(_escrowId: BytesLike, overrides?: CallOverrides): Promise<void>;

    claimRewards(
      _escrowIdsByAddress: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    escrowIdsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    escrows(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        start: BigNumber;
        lastUpdateTime: BigNumber;
        end: BigNumber;
        initialBalance: BigNumber;
        balance: BigNumber;
        account: string;
      }
    >;

    getClaimableAmount(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrowIdsByUser(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEscrows(
      _escrowIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        start: BigNumber;
        lastUpdateTime: BigNumber;
        end: BigNumber;
        initialBalance: BigNumber;
        balance: BigNumber;
        account: string;
      })[]
    >;

    isClaimable(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAuthorizedContract(
      _staking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddAuthorizedContract(address)"(
      _contract?: null
    ): TypedEventFilter<[string], { _contract: string }>;

    AddAuthorizedContract(
      _contract?: null
    ): TypedEventFilter<[string], { _contract: string }>;

    "Locked(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Locked(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RemoveAuthorizedContract(address)"(
      _contract?: null
    ): TypedEventFilter<[string], { _contract: string }>;

    RemoveAuthorizedContract(
      _contract?: null
    ): TypedEventFilter<[string], { _contract: string }>;

    "RewardsClaimed(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    RewardsClaimed(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "TokenAdded(address,uint256)"(
      token?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; index: BigNumber }
    >;

    TokenAdded(
      token?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; index: BigNumber }
    >;
  };

  estimateGas: {
    POP(overrides?: CallOverrides): Promise<BigNumber>;

    addAuthorizedContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _escrowId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      _escrowIdsByAddress: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escrowIdsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrows(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableAmount(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrowIdsByUser(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEscrows(
      _escrowIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimable(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuthorizedContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAuthorizedContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _escrowId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _escrowIdsByAddress: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escrowIdsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrows(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableAmount(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEscrowIdsByUser(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEscrows(
      _escrowIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimable(
      _escrowId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuthorizedContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
