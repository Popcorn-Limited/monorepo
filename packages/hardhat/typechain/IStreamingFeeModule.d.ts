/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IStreamingFeeModuleInterface extends ethers.utils.Interface {
  functions: {
    "accrueFee(address)": FunctionFragment;
    "feeStates(address)": FunctionFragment;
    "getFee(address)": FunctionFragment;
    "initialize(address,(address,uint256,uint256,uint256))": FunctionFragment;
    "updateFeeRecipient(address,address)": FunctionFragment;
    "updateStreamingFee(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accrueFee", values: [string]): string;
  encodeFunctionData(functionFragment: "feeStates", values: [string]): string;
  encodeFunctionData(functionFragment: "getFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      {
        feeRecipient: string;
        maxStreamingFeePercentage: BigNumberish;
        streamingFeePercentage: BigNumberish;
        lastStreamingFeeTimestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStreamingFee",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accrueFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStreamingFee",
    data: BytesLike
  ): Result;

  events: {};
}

export class IStreamingFeeModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStreamingFeeModuleInterface;

  functions: {
    accrueFee(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeStates(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber] & {
          feeRecipient: string;
          maxStreamingFeePercentage: BigNumber;
          streamingFeePercentage: BigNumber;
          lastStreamingFeeTimestamp: BigNumber;
        }
      ]
    >;

    getFee(_setToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _setToken: string,
      _settings: {
        feeRecipient: string;
        maxStreamingFeePercentage: BigNumberish;
        streamingFeePercentage: BigNumberish;
        lastStreamingFeeTimestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accrueFee(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeStates(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      feeRecipient: string;
      maxStreamingFeePercentage: BigNumber;
      streamingFeePercentage: BigNumber;
      lastStreamingFeeTimestamp: BigNumber;
    }
  >;

  getFee(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _setToken: string,
    _settings: {
      feeRecipient: string;
      maxStreamingFeePercentage: BigNumberish;
      streamingFeePercentage: BigNumberish;
      lastStreamingFeeTimestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    _setToken: string,
    _newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStreamingFee(
    _setToken: string,
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accrueFee(_setToken: string, overrides?: CallOverrides): Promise<void>;

    feeStates(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        feeRecipient: string;
        maxStreamingFeePercentage: BigNumber;
        streamingFeePercentage: BigNumber;
        lastStreamingFeeTimestamp: BigNumber;
      }
    >;

    getFee(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _settings: {
        feeRecipient: string;
        maxStreamingFeePercentage: BigNumberish;
        streamingFeePercentage: BigNumberish;
        lastStreamingFeeTimestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accrueFee(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeStates(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFee(_setToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _settings: {
        feeRecipient: string;
        maxStreamingFeePercentage: BigNumberish;
        streamingFeePercentage: BigNumberish;
        lastStreamingFeeTimestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueFee(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeStates(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      _settings: {
        feeRecipient: string;
        maxStreamingFeePercentage: BigNumberish;
        streamingFeePercentage: BigNumberish;
        lastStreamingFeeTimestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStreamingFee(
      _setToken: string,
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
