/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockBasicIssuanceModuleInterface extends ethers.utils.Interface {
  functions: {
    "getRequiredComponentUnitsForIssue(address,uint256)": FunctionFragment;
    "issue(address,uint256,address)": FunctionFragment;
    "quantities(uint256)": FunctionFragment;
    "redeem(address,uint256,address)": FunctionFragment;
    "underlying(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRequiredComponentUnitsForIssue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quantities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRequiredComponentUnitsForIssue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quantities", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {
    "SetIssued(address,uint256,address)": EventFragment;
    "SetRedeemed(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRedeemed"): EventFragment;
}

export type SetIssuedEvent = TypedEvent<
  [string, BigNumber, string] & {
    setToken: string;
    amount: BigNumber;
    to: string;
  }
>;

export type SetRedeemedEvent = TypedEvent<
  [string, BigNumber, string] & {
    setToken: string;
    amount: BigNumber;
    to: string;
  }
>;

export class MockBasicIssuanceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockBasicIssuanceModuleInterface;

  functions: {
    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quantities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getRequiredComponentUnitsForIssue(
    _setToken: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  issue(
    _setToken: string,
    _quantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quantities(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    _setToken: string,
    _quantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    quantities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SetIssued(address,uint256,address)"(
      setToken?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { setToken: string; amount: BigNumber; to: string }
    >;

    SetIssued(
      setToken?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { setToken: string; amount: BigNumber; to: string }
    >;

    "SetRedeemed(address,uint256,address)"(
      setToken?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { setToken: string; amount: BigNumber; to: string }
    >;

    SetRedeemed(
      setToken?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { setToken: string; amount: BigNumber; to: string }
    >;
  };

  estimateGas: {
    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quantities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quantities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
