/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KeeperIncentivizedInterface extends ethers.utils.Interface {
  functions: {
    "KEEPER_INCENTIVE()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KEEPER_INCENTIVE",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "KEEPER_INCENTIVE",
    data: BytesLike
  ): Result;

  events: {
    "KeeperConfigUpdated(tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeeperConfigUpdated"): EventFragment;
}

export type KeeperConfigUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    },
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    }
  ] & {
    oldConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
    newConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
  }
>;

export class KeeperIncentivized extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KeeperIncentivizedInterface;

  functions: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<[string]>;
  };

  KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "KeeperConfigUpdated(tuple,tuple)"(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;

    KeeperConfigUpdated(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;
  };

  estimateGas: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
