/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BeneficiaryGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "DefaultConfigurations()": FunctionFragment;
    "beneficiaryProposals(address)": FunctionFragment;
    "claimBond(uint256)": FunctionFragment;
    "contractName()": FunctionFragment;
    "contractRegistry()": FunctionFragment;
    "createProposal(address,bytes32,string,uint8)": FunctionFragment;
    "finalize(uint256)": FunctionFragment;
    "getNumberOfProposals(uint8)": FunctionFragment;
    "getNumberOfVoters(uint256)": FunctionFragment;
    "getStatus(uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "nominations(uint256)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "refreshState(uint256)": FunctionFragment;
    "setConfiguration(uint256,uint256,uint256)": FunctionFragment;
    "takedowns(uint256)": FunctionFragment;
    "vote(uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DefaultConfigurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryProposals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takedowns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DefaultConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takedowns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "BondWithdrawn(address,uint256)": EventFragment;
    "Finalize(uint256)": EventFragment;
    "ProposalCreated(uint256,address,address,string)": EventFragment;
    "Vote(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BondWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
}

export type BondWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { _address: string; amount: BigNumber }
>;

export type FinalizeEvent = TypedEvent<[BigNumber] & { proposalId: BigNumber }>;

export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    proposalId: BigNumber;
    proposer: string;
    beneficiary: string;
    applicationCid: string;
  }
>;

export type VoteEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    proposalId: BigNumber;
    voter: string;
    weight: BigNumber;
  }
>;

export class BeneficiaryGovernance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BeneficiaryGovernanceInterface;

  functions: {
    DefaultConfigurations(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        votingPeriod: BigNumber;
        vetoPeriod: BigNumber;
        proposalBond: BigNumber;
      }
    >;

    beneficiaryProposals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimBond(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    createProposal(
      _beneficiary: string,
      _region: BytesLike,
      _applicationCid: string,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalize(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNumberOfProposals(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfVoters(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatus(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasVoted(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nominations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber] & {
          votingPeriod: BigNumber;
          vetoPeriod: BigNumber;
          proposalBond: BigNumber;
        },
        string
      ] & {
        status: number;
        beneficiary: string;
        applicationCid: string;
        proposer: string;
        startTime: BigNumber;
        region: string;
        yesCount: BigNumber;
        noCount: BigNumber;
        voterCount: BigNumber;
        proposalType: number;
        configurationOptions: [BigNumber, BigNumber, BigNumber] & {
          votingPeriod: BigNumber;
          vetoPeriod: BigNumber;
          proposalBond: BigNumber;
        };
        vaultId: string;
      }
    >;

    refreshState(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfiguration(
      _votingPeriod: BigNumberish,
      _vetoPeriod: BigNumberish,
      _proposalBond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takedowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DefaultConfigurations(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      votingPeriod: BigNumber;
      vetoPeriod: BigNumber;
      proposalBond: BigNumber;
    }
  >;

  beneficiaryProposals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimBond(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractName(overrides?: CallOverrides): Promise<string>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  createProposal(
    _beneficiary: string,
    _region: BytesLike,
    _applicationCid: string,
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalize(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNumberOfProposals(
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfVoters(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatus(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  hasVoted(
    _proposalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nominations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      [BigNumber, BigNumber, BigNumber] & {
        votingPeriod: BigNumber;
        vetoPeriod: BigNumber;
        proposalBond: BigNumber;
      },
      string
    ] & {
      status: number;
      beneficiary: string;
      applicationCid: string;
      proposer: string;
      startTime: BigNumber;
      region: string;
      yesCount: BigNumber;
      noCount: BigNumber;
      voterCount: BigNumber;
      proposalType: number;
      configurationOptions: [BigNumber, BigNumber, BigNumber] & {
        votingPeriod: BigNumber;
        vetoPeriod: BigNumber;
        proposalBond: BigNumber;
      };
      vaultId: string;
    }
  >;

  refreshState(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfiguration(
    _votingPeriod: BigNumberish,
    _vetoPeriod: BigNumberish,
    _proposalBond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takedowns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DefaultConfigurations(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        votingPeriod: BigNumber;
        vetoPeriod: BigNumber;
        proposalBond: BigNumber;
      }
    >;

    beneficiaryProposals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBond(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractName(overrides?: CallOverrides): Promise<string>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    createProposal(
      _beneficiary: string,
      _region: BytesLike,
      _applicationCid: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalize(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNumberOfProposals(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfVoters(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    hasVoted(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nominations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber] & {
          votingPeriod: BigNumber;
          vetoPeriod: BigNumber;
          proposalBond: BigNumber;
        },
        string
      ] & {
        status: number;
        beneficiary: string;
        applicationCid: string;
        proposer: string;
        startTime: BigNumber;
        region: string;
        yesCount: BigNumber;
        noCount: BigNumber;
        voterCount: BigNumber;
        proposalType: number;
        configurationOptions: [BigNumber, BigNumber, BigNumber] & {
          votingPeriod: BigNumber;
          vetoPeriod: BigNumber;
          proposalBond: BigNumber;
        };
        vaultId: string;
      }
    >;

    refreshState(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfiguration(
      _votingPeriod: BigNumberish,
      _vetoPeriod: BigNumberish,
      _proposalBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takedowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BondWithdrawn(address,uint256)"(
      _address?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _address: string; amount: BigNumber }
    >;

    BondWithdrawn(
      _address?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _address: string; amount: BigNumber }
    >;

    "Finalize(uint256)"(
      proposalId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;

    Finalize(
      proposalId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;

    "ProposalCreated(uint256,address,address,string)"(
      proposalId?: BigNumberish | null,
      proposer?: string | null,
      beneficiary?: string | null,
      applicationCid?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      {
        proposalId: BigNumber;
        proposer: string;
        beneficiary: string;
        applicationCid: string;
      }
    >;

    ProposalCreated(
      proposalId?: BigNumberish | null,
      proposer?: string | null,
      beneficiary?: string | null,
      applicationCid?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      {
        proposalId: BigNumber;
        proposer: string;
        beneficiary: string;
        applicationCid: string;
      }
    >;

    "Vote(uint256,address,uint256)"(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      weight?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { proposalId: BigNumber; voter: string; weight: BigNumber }
    >;

    Vote(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      weight?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { proposalId: BigNumber; voter: string; weight: BigNumber }
    >;
  };

  estimateGas: {
    DefaultConfigurations(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiaryProposals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBond(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    createProposal(
      _beneficiary: string,
      _region: BytesLike,
      _applicationCid: string,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalize(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNumberOfProposals(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfVoters(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshState(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfiguration(
      _votingPeriod: BigNumberish,
      _vetoPeriod: BigNumberish,
      _proposalBond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takedowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DefaultConfigurations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryProposals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBond(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createProposal(
      _beneficiary: string,
      _region: BytesLike,
      _applicationCid: string,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalize(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNumberOfProposals(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfVoters(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatus(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refreshState(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      _votingPeriod: BigNumberish,
      _vetoPeriod: BigNumberish,
      _proposalBond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takedowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
