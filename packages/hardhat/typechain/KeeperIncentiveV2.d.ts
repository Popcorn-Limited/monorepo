/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KeeperIncentiveV2Interface extends ethers.utils.Interface {
  functions: {
    "accounts(bytes32,address)": FunctionFragment;
    "allowedControllers(address)": FunctionFragment;
    "burn(address)": FunctionFragment;
    "burnBalancesByToken(address)": FunctionFragment;
    "cachedAccounts(bytes32,address)": FunctionFragment;
    "claim(bytes32[])": FunctionFragment;
    "controllerContracts(uint256)": FunctionFragment;
    "createIncentive(address,uint256,bool,bool,address,uint256,uint256)": FunctionFragment;
    "defaultBurnPercentage()": FunctionFragment;
    "fundIncentive(address,uint256,uint256)": FunctionFragment;
    "getAccounts(address)": FunctionFragment;
    "getControllerContracts()": FunctionFragment;
    "handleKeeperIncentive(bytes32,uint8,address)": FunctionFragment;
    "hasClaimableBalance(address)": FunctionFragment;
    "incentiveAccountId(address,uint256,address)": FunctionFragment;
    "incentivesByController(address,uint256)": FunctionFragment;
    "keeperAccounts(address,uint256)": FunctionFragment;
    "requiredKeeperStake()": FunctionFragment;
    "tip(address,address,uint256,uint256)": FunctionFragment;
    "tipWithBurn(address,address,uint256,uint256,uint256)": FunctionFragment;
    "toggleApproval(address,uint8)": FunctionFragment;
    "toggleIncentive(address,uint8)": FunctionFragment;
    "updateBurnPercentage(uint256)": FunctionFragment;
    "updateIncentive(address,uint8,uint256,bool,bool,address,uint256,uint256)": FunctionFragment;
    "updateRequiredKeeperStake(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accounts",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedControllers",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnBalancesByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cachedAccounts",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "controllerContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncentive",
    values: [
      string,
      BigNumberish,
      boolean,
      boolean,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBurnPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundIncentive",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAccounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getControllerContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleKeeperIncentive",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimableBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveAccountId",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesByController",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperAccounts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredKeeperStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tipWithBurn",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleIncentive",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBurnPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncentive",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequiredKeeperStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnBalancesByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBurnPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllerContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleKeeperIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivesByController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredKeeperStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tipWithBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBurnPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequiredKeeperStake",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalToggled(address,bool)": EventFragment;
    "BurnPercentageChanged(uint256,uint256)": EventFragment;
    "Burned(uint256,address)": EventFragment;
    "Claimed(address,address,uint256)": EventFragment;
    "IncentiveChanged(address,uint256,uint256,bool,bool,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "IncentiveCreated(address,uint256,bool,uint256)": EventFragment;
    "IncentiveFunded(uint256,address,uint256)": EventFragment;
    "IncentiveTipped(uint256,address)": EventFragment;
    "IncentiveToggled(address,bool)": EventFragment;
    "RequiredKeeperStakeChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnPercentageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveTipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequiredKeeperStakeChanged"): EventFragment;
}

export type ApprovalToggledEvent = TypedEvent<
  [string, boolean] & { contractAddress: string; openToEveryone: boolean }
>;

export type BurnPercentageChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldRate: BigNumber; newRate: BigNumber }
>;

export type BurnedEvent = TypedEvent<
  [BigNumber, string] & { amount: BigNumber; tokenAddress: string }
>;

export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    account: string;
    amount: BigNumber;
  }
>;

export type IncentiveChangedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    contractAddress: string;
    oldReward: BigNumber;
    newReward: BigNumber;
    oldOpenToEveryone: boolean;
    newOpenToEveryone: boolean;
    oldRewardToken: string;
    newRewardToken: string;
    oldCooldown: BigNumber;
    newCooldown: BigNumber;
    oldBurnPercentage: BigNumber;
    newBurnPercentage: BigNumber;
    index: BigNumber;
  }
>;

export type IncentiveCreatedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber] & {
    contractAddress: string;
    reward: BigNumber;
    openToEveryone: boolean;
    index: BigNumber;
  }
>;

export type IncentiveFundedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    amount: BigNumber;
    rewardToken: string;
    incentiveBalance: BigNumber;
  }
>;

export type IncentiveTippedEvent = TypedEvent<
  [BigNumber, string] & { amount: BigNumber; rewardToken: string }
>;

export type IncentiveToggledEvent = TypedEvent<
  [string, boolean] & { contractAddress: string; enabled: boolean }
>;

export type RequiredKeeperStakeChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldRequirement: BigNumber;
    newRequirement: BigNumber;
  }
>;

export class KeeperIncentiveV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KeeperIncentiveV2Interface;

  functions: {
    accounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        balance: BigNumber;
        token: string;
        accountId: string;
      }
    >;

    allowedControllers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    burn(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnBalancesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cachedAccounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      incentiveAccountIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controllerContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createIncentive(
      _address: string,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultBurnPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, string] & {
          balance: BigNumber;
          token: string;
          accountId: string;
        })[]
      ]
    >;

    getControllerContracts(overrides?: CallOverrides): Promise<[string[]]>;

    "handleKeeperIncentive(bytes32,uint8,address)"(
      arg0: BytesLike,
      _i: BigNumberish,
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "handleKeeperIncentive(uint8,address)"(
      _i: BigNumberish,
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasClaimableBalance(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incentiveAccountId(
      _contractAddress: string,
      _i: BigNumberish,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    incentivesByController(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reward: BigNumber;
        enabled: boolean;
        openToEveryone: boolean;
        rewardToken: string;
        cooldown: BigNumber;
        burnPercentage: BigNumber;
        id: BigNumber;
        lastInvocation: BigNumber;
      }
    >;

    keeperAccounts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    requiredKeeperStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    tip(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tipWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleApproval(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBurnPercentage(
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRequiredKeeperStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accounts(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      balance: BigNumber;
      token: string;
      accountId: string;
    }
  >;

  allowedControllers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  burn(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnBalancesByToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cachedAccounts(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim(
    incentiveAccountIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controllerContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createIncentive(
    _address: string,
    _reward: BigNumberish,
    _enabled: boolean,
    _openToEveryone: boolean,
    _rewardToken: string,
    _cooldown: BigNumberish,
    _burnPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultBurnPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  fundIncentive(
    _contractAddress: string,
    _i: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccounts(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, string] & {
      balance: BigNumber;
      token: string;
      accountId: string;
    })[]
  >;

  getControllerContracts(overrides?: CallOverrides): Promise<string[]>;

  "handleKeeperIncentive(bytes32,uint8,address)"(
    arg0: BytesLike,
    _i: BigNumberish,
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "handleKeeperIncentive(uint8,address)"(
    _i: BigNumberish,
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasClaimableBalance(
    keeper: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incentiveAccountId(
    _contractAddress: string,
    _i: BigNumberish,
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  incentivesByController(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      reward: BigNumber;
      enabled: boolean;
      openToEveryone: boolean;
      rewardToken: string;
      cooldown: BigNumber;
      burnPercentage: BigNumber;
      id: BigNumber;
      lastInvocation: BigNumber;
    }
  >;

  keeperAccounts(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  requiredKeeperStake(overrides?: CallOverrides): Promise<BigNumber>;

  tip(
    _rewardToken: string,
    _keeper: string,
    _i: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tipWithBurn(
    _rewardToken: string,
    _keeper: string,
    _i: BigNumberish,
    _amount: BigNumberish,
    _burnPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleApproval(
    _contractAddress: string,
    _i: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleIncentive(
    _contractAddress: string,
    _i: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBurnPercentage(
    _burnPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIncentive(
    _contractAddress: string,
    _i: BigNumberish,
    _reward: BigNumberish,
    _enabled: boolean,
    _openToEveryone: boolean,
    _rewardToken: string,
    _cooldown: BigNumberish,
    _burnPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRequiredKeeperStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        balance: BigNumber;
        token: string;
        accountId: string;
      }
    >;

    allowedControllers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burn(tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    burnBalancesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cachedAccounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim(
      incentiveAccountIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    controllerContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncentive(
      _address: string,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultBurnPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    fundIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, string] & {
        balance: BigNumber;
        token: string;
        accountId: string;
      })[]
    >;

    getControllerContracts(overrides?: CallOverrides): Promise<string[]>;

    "handleKeeperIncentive(bytes32,uint8,address)"(
      arg0: BytesLike,
      _i: BigNumberish,
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "handleKeeperIncentive(uint8,address)"(
      _i: BigNumberish,
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasClaimableBalance(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incentiveAccountId(
      _contractAddress: string,
      _i: BigNumberish,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    incentivesByController(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        reward: BigNumber;
        enabled: boolean;
        openToEveryone: boolean;
        rewardToken: string;
        cooldown: BigNumber;
        burnPercentage: BigNumber;
        id: BigNumber;
        lastInvocation: BigNumber;
      }
    >;

    keeperAccounts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    requiredKeeperStake(overrides?: CallOverrides): Promise<BigNumber>;

    tip(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tipWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleApproval(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBurnPercentage(
      _burnPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRequiredKeeperStake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalToggled(address,bool)"(
      contractAddress?: string | null,
      openToEveryone?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; openToEveryone: boolean }
    >;

    ApprovalToggled(
      contractAddress?: string | null,
      openToEveryone?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; openToEveryone: boolean }
    >;

    "BurnPercentageChanged(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRate: BigNumber; newRate: BigNumber }
    >;

    BurnPercentageChanged(
      oldRate?: null,
      newRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRate: BigNumber; newRate: BigNumber }
    >;

    "Burned(uint256,address)"(
      amount?: null,
      tokenAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; tokenAddress: string }
    >;

    Burned(
      amount?: null,
      tokenAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; tokenAddress: string }
    >;

    "Claimed(address,address,uint256)"(
      token?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    Claimed(
      token?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    "IncentiveChanged(address,uint256,uint256,bool,bool,address,address,uint256,uint256,uint256,uint256,uint256)"(
      contractAddress?: string | null,
      oldReward?: null,
      newReward?: null,
      oldOpenToEveryone?: null,
      newOpenToEveryone?: null,
      oldRewardToken?: null,
      newRewardToken?: null,
      oldCooldown?: null,
      newCooldown?: null,
      oldBurnPercentage?: null,
      newBurnPercentage?: null,
      index?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        contractAddress: string;
        oldReward: BigNumber;
        newReward: BigNumber;
        oldOpenToEveryone: boolean;
        newOpenToEveryone: boolean;
        oldRewardToken: string;
        newRewardToken: string;
        oldCooldown: BigNumber;
        newCooldown: BigNumber;
        oldBurnPercentage: BigNumber;
        newBurnPercentage: BigNumber;
        index: BigNumber;
      }
    >;

    IncentiveChanged(
      contractAddress?: string | null,
      oldReward?: null,
      newReward?: null,
      oldOpenToEveryone?: null,
      newOpenToEveryone?: null,
      oldRewardToken?: null,
      newRewardToken?: null,
      oldCooldown?: null,
      newCooldown?: null,
      oldBurnPercentage?: null,
      newBurnPercentage?: null,
      index?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        contractAddress: string;
        oldReward: BigNumber;
        newReward: BigNumber;
        oldOpenToEveryone: boolean;
        newOpenToEveryone: boolean;
        oldRewardToken: string;
        newRewardToken: string;
        oldCooldown: BigNumber;
        newCooldown: BigNumber;
        oldBurnPercentage: BigNumber;
        newBurnPercentage: BigNumber;
        index: BigNumber;
      }
    >;

    "IncentiveCreated(address,uint256,bool,uint256)"(
      contractAddress?: string | null,
      reward?: null,
      openToEveryone?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        contractAddress: string;
        reward: BigNumber;
        openToEveryone: boolean;
        index: BigNumber;
      }
    >;

    IncentiveCreated(
      contractAddress?: string | null,
      reward?: null,
      openToEveryone?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        contractAddress: string;
        reward: BigNumber;
        openToEveryone: boolean;
        index: BigNumber;
      }
    >;

    "IncentiveFunded(uint256,address,uint256)"(
      amount?: null,
      rewardToken?: string | null,
      incentiveBalance?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { amount: BigNumber; rewardToken: string; incentiveBalance: BigNumber }
    >;

    IncentiveFunded(
      amount?: null,
      rewardToken?: string | null,
      incentiveBalance?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { amount: BigNumber; rewardToken: string; incentiveBalance: BigNumber }
    >;

    "IncentiveTipped(uint256,address)"(
      amount?: null,
      rewardToken?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; rewardToken: string }
    >;

    IncentiveTipped(
      amount?: null,
      rewardToken?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; rewardToken: string }
    >;

    "IncentiveToggled(address,bool)"(
      contractAddress?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; enabled: boolean }
    >;

    IncentiveToggled(
      contractAddress?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; enabled: boolean }
    >;

    "RequiredKeeperStakeChanged(uint256,uint256)"(
      oldRequirement?: null,
      newRequirement?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRequirement: BigNumber; newRequirement: BigNumber }
    >;

    RequiredKeeperStakeChanged(
      oldRequirement?: null,
      newRequirement?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRequirement: BigNumber; newRequirement: BigNumber }
    >;
  };

  estimateGas: {
    accounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedControllers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnBalancesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cachedAccounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      incentiveAccountIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controllerContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createIncentive(
      _address: string,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultBurnPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    fundIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccounts(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getControllerContracts(overrides?: CallOverrides): Promise<BigNumber>;

    "handleKeeperIncentive(bytes32,uint8,address)"(
      arg0: BytesLike,
      _i: BigNumberish,
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "handleKeeperIncentive(uint8,address)"(
      _i: BigNumberish,
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasClaimableBalance(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveAccountId(
      _contractAddress: string,
      _i: BigNumberish,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesByController(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperAccounts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredKeeperStake(overrides?: CallOverrides): Promise<BigNumber>;

    tip(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tipWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleApproval(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBurnPercentage(
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRequiredKeeperStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedControllers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnBalancesByToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cachedAccounts(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      incentiveAccountIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controllerContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createIncentive(
      _address: string,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultBurnPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getControllerContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "handleKeeperIncentive(bytes32,uint8,address)"(
      arg0: BytesLike,
      _i: BigNumberish,
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "handleKeeperIncentive(uint8,address)"(
      _i: BigNumberish,
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasClaimableBalance(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveAccountId(
      _contractAddress: string,
      _i: BigNumberish,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivesByController(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeperAccounts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredKeeperStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tip(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tipWithBurn(
      _rewardToken: string,
      _keeper: string,
      _i: BigNumberish,
      _amount: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleApproval(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBurnPercentage(
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIncentive(
      _contractAddress: string,
      _i: BigNumberish,
      _reward: BigNumberish,
      _enabled: boolean,
      _openToEveryone: boolean,
      _rewardToken: string,
      _cooldown: BigNumberish,
      _burnPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRequiredKeeperStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
