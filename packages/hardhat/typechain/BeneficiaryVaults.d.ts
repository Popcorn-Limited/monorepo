/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BeneficiaryVaultsInterface extends ethers.utils.Interface {
  functions: {
    "allocateRewards()": FunctionFragment;
    "claimReward(uint8,bytes32[],address,uint256)": FunctionFragment;
    "closeVault(uint8)": FunctionFragment;
    "contractRegistry()": FunctionFragment;
    "getVault(uint8)": FunctionFragment;
    "hasClaimed(uint8,address)": FunctionFragment;
    "openVault(uint8,bytes32)": FunctionFragment;
    "totalDistributedBalance()": FunctionFragment;
    "vaultExists(uint8)": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
    "verifyClaim(uint8,bytes32[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocateRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BytesLike[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openVault",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [BigNumberish, BytesLike[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;

  events: {
    "RewardClaimed(uint8,address,uint256)": EventFragment;
    "RewardsAllocated(uint256)": EventFragment;
    "VaultClosed(uint8)": EventFragment;
    "VaultOpened(uint8,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAllocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultOpened"): EventFragment;
}

export type RewardClaimedEvent = TypedEvent<
  [number, string, BigNumber] & {
    vaultId: number;
    beneficiary: string;
    amount: BigNumber;
  }
>;

export type RewardsAllocatedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type VaultClosedEvent = TypedEvent<[number] & { vaultId: number }>;

export type VaultOpenedEvent = TypedEvent<
  [number, string] & { vaultId: number; merkleRoot: string }
>;

export class BeneficiaryVaults extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BeneficiaryVaultsInterface;

  functions: {
    allocateRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeVault(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    getVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        totalAllocated: BigNumber;
        currentBalance: BigNumber;
        unclaimedShare: BigNumber;
        merkleRoot: string;
        status: number;
      }
    >;

    hasClaimed(
      _vaultId: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    openVault(
      _vaultId: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDistributedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultExists(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        totalAllocated: BigNumber;
        currentBalance: BigNumber;
        unclaimedShare: BigNumber;
        merkleRoot: string;
        status: number;
      }
    >;

    verifyClaim(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  allocateRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _vaultId: BigNumberish,
    _proof: BytesLike[],
    _beneficiary: string,
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeVault(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  getVault(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number] & {
      totalAllocated: BigNumber;
      currentBalance: BigNumber;
      unclaimedShare: BigNumber;
      merkleRoot: string;
      status: number;
    }
  >;

  hasClaimed(
    _vaultId: BigNumberish,
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  openVault(
    _vaultId: BigNumberish,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDistributedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  vaultExists(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vaults(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number] & {
      totalAllocated: BigNumber;
      currentBalance: BigNumber;
      unclaimedShare: BigNumber;
      merkleRoot: string;
      status: number;
    }
  >;

  verifyClaim(
    _vaultId: BigNumberish,
    _proof: BytesLike[],
    _beneficiary: string,
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allocateRewards(overrides?: CallOverrides): Promise<void>;

    claimReward(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    getVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        totalAllocated: BigNumber;
        currentBalance: BigNumber;
        unclaimedShare: BigNumber;
        merkleRoot: string;
        status: number;
      }
    >;

    hasClaimed(
      _vaultId: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    openVault(
      _vaultId: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDistributedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    vaultExists(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        totalAllocated: BigNumber;
        currentBalance: BigNumber;
        unclaimedShare: BigNumber;
        merkleRoot: string;
        status: number;
      }
    >;

    verifyClaim(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RewardClaimed(uint8,address,uint256)"(
      vaultId?: null,
      beneficiary?: null,
      amount?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { vaultId: number; beneficiary: string; amount: BigNumber }
    >;

    RewardClaimed(
      vaultId?: null,
      beneficiary?: null,
      amount?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { vaultId: number; beneficiary: string; amount: BigNumber }
    >;

    "RewardsAllocated(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    RewardsAllocated(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "VaultClosed(uint8)"(
      vaultId?: null
    ): TypedEventFilter<[number], { vaultId: number }>;

    VaultClosed(
      vaultId?: null
    ): TypedEventFilter<[number], { vaultId: number }>;

    "VaultOpened(uint8,bytes32)"(
      vaultId?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [number, string],
      { vaultId: number; merkleRoot: string }
    >;

    VaultOpened(
      vaultId?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [number, string],
      { vaultId: number; merkleRoot: string }
    >;
  };

  estimateGas: {
    allocateRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeVault(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimed(
      _vaultId: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openVault(
      _vaultId: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDistributedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    vaultExists(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    verifyClaim(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeVault(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      _vaultId: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openVault(
      _vaultId: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDistributedBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultExists(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      _vaultId: BigNumberish,
      _proof: BytesLike[],
      _beneficiary: string,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
