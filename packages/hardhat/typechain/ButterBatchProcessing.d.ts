/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ButterBatchProcessingInterface extends ethers.utils.Interface {
  functions: {
    "KEEPER_INCENTIVE()": FunctionFragment;
    "accountBalances(bytes32,address)": FunctionFragment;
    "accountBatches(address,uint256)": FunctionFragment;
    "batchIds(uint256)": FunctionFragment;
    "batchMint()": FunctionFragment;
    "batchRedeem()": FunctionFragment;
    "batches(bytes32)": FunctionFragment;
    "claim(bytes32,address)": FunctionFragment;
    "claimAndStake(bytes32,address)": FunctionFragment;
    "claimRedemptionFee()": FunctionFragment;
    "contractName()": FunctionFragment;
    "currentMintBatchId()": FunctionFragment;
    "currentRedeemBatchId()": FunctionFragment;
    "curvePoolTokenPairs(address)": FunctionFragment;
    "depositForMint(uint256,address)": FunctionFragment;
    "depositForRedeem(uint256)": FunctionFragment;
    "getAccountBatches(address)": FunctionFragment;
    "getMinAmount3CrvFromRedeem(uint256,uint256)": FunctionFragment;
    "getMinAmountToMint(uint256,uint256,uint256)": FunctionFragment;
    "lastMintedAt()": FunctionFragment;
    "lastRedeemedAt()": FunctionFragment;
    "moveUnclaimedDepositsIntoCurrentBatch(bytes32[],uint256[],uint8)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "processingThreshold()": FunctionFragment;
    "recoverLeftover(address,uint256)": FunctionFragment;
    "redemptionFee()": FunctionFragment;
    "setApprovals()": FunctionFragment;
    "setBasicIssuanceModule()": FunctionFragment;
    "setCurvePoolTokenPairs(address[],tuple[])": FunctionFragment;
    "setProcessingThreshold(uint256,uint256,uint256)": FunctionFragment;
    "setRedemptionFee(uint256,address)": FunctionFragment;
    "setSlippage(uint256,uint256)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "setToken()": FunctionFragment;
    "slippage()": FunctionFragment;
    "staking()": FunctionFragment;
    "sweethearts(address)": FunctionFragment;
    "threeCrv()": FunctionFragment;
    "threePool()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateSweetheart(address,bool)": FunctionFragment;
    "valueOf3Crv(uint256)": FunctionFragment;
    "valueOfComponents(address[],uint256[])": FunctionFragment;
    "withdrawFromBatch(bytes32,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KEEPER_INCENTIVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountBalances",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountBatches",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "batchMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "batches", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndStake",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRedemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMintBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRedeemBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curvePoolTokenPairs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBatches",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinAmount3CrvFromRedeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinAmountToMint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMintedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRedeemedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveUnclaimedDepositsIntoCurrentBatch",
    values: [BytesLike[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processingThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverLeftover",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBasicIssuanceModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurvePoolTokenPairs",
    values: [string[], { curveMetaPool: string; crvLPToken: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessingThreshold",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStaking", values: [string]): string;
  encodeFunctionData(functionFragment: "setToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "slippage", values?: undefined): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweethearts", values: [string]): string;
  encodeFunctionData(functionFragment: "threeCrv", values?: undefined): string;
  encodeFunctionData(functionFragment: "threePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateSweetheart",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOf3Crv",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfComponents",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromBatch",
    values: [BytesLike, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "KEEPER_INCENTIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMintBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRedeemBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePoolTokenPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinAmount3CrvFromRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinAmountToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMintedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRedeemedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveUnclaimedDepositsIntoCurrentBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverLeftover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBasicIssuanceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurvePoolTokenPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcessingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweethearts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threeCrv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSweetheart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOf3Crv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromBatch",
    data: BytesLike
  ): Result;

  events: {
    "BatchMinted(bytes32,uint256,uint256)": EventFragment;
    "BatchRedeemed(bytes32,uint256,uint256)": EventFragment;
    "Claimed(address,uint8,uint256,uint256)": EventFragment;
    "CurveTokenPairsUpdated(address[],tuple[])": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "KeeperConfigUpdated(tuple,tuple)": EventFragment;
    "MovedUnclaimedDepositsIntoCurrentBatch(uint256,uint8,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProcessingThresholdUpdated(tuple,tuple)": EventFragment;
    "RedemptionFeeUpdated(uint256,address)": EventFragment;
    "SlippageUpdated(tuple,tuple)": EventFragment;
    "StakingUpdated(address,address)": EventFragment;
    "SweetheartUpdated(address,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
    "WithdrawnFromBatch(bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurveTokenPairsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperConfigUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MovedUnclaimedDepositsIntoCurrentBatch"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessingThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlippageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweetheartUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnFromBatch"): EventFragment;
}

export type BatchMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    batchId: string;
    suppliedTokenAmount: BigNumber;
    butterAmount: BigNumber;
  }
>;

export type BatchRedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    batchId: string;
    suppliedTokenAmount: BigNumber;
    threeCrvAmount: BigNumber;
  }
>;

export type ClaimedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber] & {
    account: string;
    batchType: number;
    shares: BigNumber;
    claimedToken: BigNumber;
  }
>;

export type CurveTokenPairsUpdatedEvent = TypedEvent<
  [
    string[],
    ([string, string] & { curveMetaPool: string; crvLPToken: string })[]
  ] & {
    yTokenAddresses: string[];
    curveTokenPairs: ([string, string] & {
      curveMetaPool: string;
      crvLPToken: string;
    })[];
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber] & { from: string; deposit: BigNumber }
>;

export type KeeperConfigUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    },
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    }
  ] & {
    oldConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
    newConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
  }
>;

export type MovedUnclaimedDepositsIntoCurrentBatchEvent = TypedEvent<
  [BigNumber, number, string] & {
    amount: BigNumber;
    batchType: number;
    account: string;
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type ProcessingThresholdUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    },
    [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    }
  ] & {
    previousThreshold: [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    };
    newProcessingThreshold: [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    };
  }
>;

export type RedemptionFeeUpdatedEvent = TypedEvent<
  [BigNumber, string] & { newRedemptionFee: BigNumber; newFeeRecipient: string }
>;

export type SlippageUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber },
    [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
  ] & {
    prev: [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber };
    current: [BigNumber, BigNumber] & {
      mintBps: BigNumber;
      redeemBps: BigNumber;
    };
  }
>;

export type StakingUpdatedEvent = TypedEvent<
  [string, string] & { beforeAddress: string; afterAddress: string }
>;

export type SweetheartUpdatedEvent = TypedEvent<
  [string, boolean] & { sweetheart: string; isSweeheart: boolean }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type WithdrawnFromBatchEvent = TypedEvent<
  [string, BigNumber, string] & {
    batchId: string;
    amount: BigNumber;
    to: string;
  }
>;

export class ButterBatchProcessing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ButterBatchProcessingInterface;

  functions: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<[string]>;

    accountBalances(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accountBatches(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    batchIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        batchType: number;
        batchId: string;
        claimable: boolean;
        unclaimedShares: BigNumber;
        suppliedTokenBalance: BigNumber;
        claimableTokenBalance: BigNumber;
        suppliedTokenAddress: string;
        claimableTokenAddress: string;
      }
    >;

    claim(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRedemptionFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    currentMintBatchId(overrides?: CallOverrides): Promise<[string]>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<[string]>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { curveMetaPool: string; crvLPToken: string }
    >;

    depositForMint(
      _amount: BigNumberish,
      _depositFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositForRedeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastMintedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    moveUnclaimedDepositsIntoCurrentBatch(
      _batchIds: BytesLike[],
      _shares: BigNumberish[],
      _batchType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    processingThreshold(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        batchCooldown: BigNumber;
        mintThreshold: BigNumber;
        redeemThreshold: BigNumber;
      }
    >;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redemptionFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        accumulated: BigNumber;
        rate: BigNumber;
        recipient: string;
      }
    >;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBasicIssuanceModule(overrides?: CallOverrides): Promise<[string]>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(overrides?: CallOverrides): Promise<[string]>;

    slippage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
    >;

    staking(overrides?: CallOverrides): Promise<[string]>;

    sweethearts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    threeCrv(overrides?: CallOverrides): Promise<[string]>;

    threePool(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFromBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;

  accountBalances(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accountBatches(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  batchIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  batchMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRedeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batches(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      batchType: number;
      batchId: string;
      claimable: boolean;
      unclaimedShares: BigNumber;
      suppliedTokenBalance: BigNumber;
      claimableTokenBalance: BigNumber;
      suppliedTokenAddress: string;
      claimableTokenAddress: string;
    }
  >;

  claim(
    _batchId: BytesLike,
    _claimFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndStake(
    _batchId: BytesLike,
    _claimFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRedemptionFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractName(overrides?: CallOverrides): Promise<string>;

  currentMintBatchId(overrides?: CallOverrides): Promise<string>;

  currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

  curvePoolTokenPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { curveMetaPool: string; crvLPToken: string }>;

  depositForMint(
    _amount: BigNumberish,
    _depositFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositForRedeem(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountBatches(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMinAmount3CrvFromRedeem(
    _valueOfComponents: BigNumberish,
    _slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinAmountToMint(
    _valueOfBatch: BigNumberish,
    _valueOfComponentsPerUnit: BigNumberish,
    _slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastMintedAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastRedeemedAt(overrides?: CallOverrides): Promise<BigNumber>;

  moveUnclaimedDepositsIntoCurrentBatch(
    _batchIds: BytesLike[],
    _shares: BigNumberish[],
    _batchType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  processingThreshold(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      batchCooldown: BigNumber;
      mintThreshold: BigNumber;
      redeemThreshold: BigNumber;
    }
  >;

  recoverLeftover(
    _yTokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redemptionFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      accumulated: BigNumber;
      rate: BigNumber;
      recipient: string;
    }
  >;

  setApprovals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBasicIssuanceModule(overrides?: CallOverrides): Promise<string>;

  setCurvePoolTokenPairs(
    _yTokenAddresses: string[],
    _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProcessingThreshold(
    _cooldown: BigNumberish,
    _mintThreshold: BigNumberish,
    _redeemThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    _feeRate: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlippage(
    _mintSlippage: BigNumberish,
    _redeemSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(overrides?: CallOverrides): Promise<string>;

  slippage(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
  >;

  staking(overrides?: CallOverrides): Promise<string>;

  sweethearts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  threeCrv(overrides?: CallOverrides): Promise<string>;

  threePool(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSweetheart(
    _sweetheart: string,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  valueOf3Crv(
    _units: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueOfComponents(
    _tokenAddresses: string[],
    _quantities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFromBatch(
    _batchId: BytesLike,
    _amountToWithdraw: BigNumberish,
    _withdrawFor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;

    accountBalances(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountBatches(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    batchIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    batchMint(overrides?: CallOverrides): Promise<void>;

    batchRedeem(overrides?: CallOverrides): Promise<void>;

    batches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        batchType: number;
        batchId: string;
        claimable: boolean;
        unclaimedShares: BigNumber;
        suppliedTokenBalance: BigNumber;
        claimableTokenBalance: BigNumber;
        suppliedTokenAddress: string;
        claimableTokenAddress: string;
      }
    >;

    claim(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRedemptionFee(overrides?: CallOverrides): Promise<void>;

    contractName(overrides?: CallOverrides): Promise<string>;

    currentMintBatchId(overrides?: CallOverrides): Promise<string>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<string>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { curveMetaPool: string; crvLPToken: string }
    >;

    depositForMint(
      _amount: BigNumberish,
      _depositFor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositForRedeem(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastMintedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<BigNumber>;

    moveUnclaimedDepositsIntoCurrentBatch(
      _batchIds: BytesLike[],
      _shares: BigNumberish[],
      _batchType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    processingThreshold(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        batchCooldown: BigNumber;
        mintThreshold: BigNumber;
        redeemThreshold: BigNumber;
      }
    >;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        accumulated: BigNumber;
        rate: BigNumber;
        recipient: string;
      }
    >;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    setBasicIssuanceModule(overrides?: CallOverrides): Promise<string>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaking(_staking: string, overrides?: CallOverrides): Promise<void>;

    setToken(overrides?: CallOverrides): Promise<string>;

    slippage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
    >;

    staking(overrides?: CallOverrides): Promise<string>;

    sweethearts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    threeCrv(overrides?: CallOverrides): Promise<string>;

    threePool(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BatchMinted(bytes32,uint256,uint256)"(
      batchId?: null,
      suppliedTokenAmount?: null,
      butterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        batchId: string;
        suppliedTokenAmount: BigNumber;
        butterAmount: BigNumber;
      }
    >;

    BatchMinted(
      batchId?: null,
      suppliedTokenAmount?: null,
      butterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        batchId: string;
        suppliedTokenAmount: BigNumber;
        butterAmount: BigNumber;
      }
    >;

    "BatchRedeemed(bytes32,uint256,uint256)"(
      batchId?: null,
      suppliedTokenAmount?: null,
      threeCrvAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        batchId: string;
        suppliedTokenAmount: BigNumber;
        threeCrvAmount: BigNumber;
      }
    >;

    BatchRedeemed(
      batchId?: null,
      suppliedTokenAmount?: null,
      threeCrvAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        batchId: string;
        suppliedTokenAmount: BigNumber;
        threeCrvAmount: BigNumber;
      }
    >;

    "Claimed(address,uint8,uint256,uint256)"(
      account?: string | null,
      batchType?: null,
      shares?: null,
      claimedToken?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        account: string;
        batchType: number;
        shares: BigNumber;
        claimedToken: BigNumber;
      }
    >;

    Claimed(
      account?: string | null,
      batchType?: null,
      shares?: null,
      claimedToken?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        account: string;
        batchType: number;
        shares: BigNumber;
        claimedToken: BigNumber;
      }
    >;

    "CurveTokenPairsUpdated(address[],tuple[])"(
      yTokenAddresses?: null,
      curveTokenPairs?: null
    ): TypedEventFilter<
      [
        string[],
        ([string, string] & { curveMetaPool: string; crvLPToken: string })[]
      ],
      {
        yTokenAddresses: string[];
        curveTokenPairs: ([string, string] & {
          curveMetaPool: string;
          crvLPToken: string;
        })[];
      }
    >;

    CurveTokenPairsUpdated(
      yTokenAddresses?: null,
      curveTokenPairs?: null
    ): TypedEventFilter<
      [
        string[],
        ([string, string] & { curveMetaPool: string; crvLPToken: string })[]
      ],
      {
        yTokenAddresses: string[];
        curveTokenPairs: ([string, string] & {
          curveMetaPool: string;
          crvLPToken: string;
        })[];
      }
    >;

    "Deposit(address,uint256)"(
      from?: string | null,
      deposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; deposit: BigNumber }
    >;

    Deposit(
      from?: string | null,
      deposit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; deposit: BigNumber }
    >;

    "KeeperConfigUpdated(tuple,tuple)"(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;

    KeeperConfigUpdated(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;

    "MovedUnclaimedDepositsIntoCurrentBatch(uint256,uint8,address)"(
      amount?: null,
      batchType?: null,
      account?: string | null
    ): TypedEventFilter<
      [BigNumber, number, string],
      { amount: BigNumber; batchType: number; account: string }
    >;

    MovedUnclaimedDepositsIntoCurrentBatch(
      amount?: null,
      batchType?: null,
      account?: string | null
    ): TypedEventFilter<
      [BigNumber, number, string],
      { amount: BigNumber; batchType: number; account: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "ProcessingThresholdUpdated(tuple,tuple)"(
      previousThreshold?: null,
      newProcessingThreshold?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        }
      ],
      {
        previousThreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
        newProcessingThreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
      }
    >;

    ProcessingThresholdUpdated(
      previousThreshold?: null,
      newProcessingThreshold?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        }
      ],
      {
        previousThreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
        newProcessingThreshold: [BigNumber, BigNumber, BigNumber] & {
          batchCooldown: BigNumber;
          mintThreshold: BigNumber;
          redeemThreshold: BigNumber;
        };
      }
    >;

    "RedemptionFeeUpdated(uint256,address)"(
      newRedemptionFee?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { newRedemptionFee: BigNumber; newFeeRecipient: string }
    >;

    RedemptionFeeUpdated(
      newRedemptionFee?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { newRedemptionFee: BigNumber; newFeeRecipient: string }
    >;

    "SlippageUpdated(tuple,tuple)"(
      prev?: null,
      current?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber },
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
      ],
      {
        prev: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
        current: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
      }
    >;

    SlippageUpdated(
      prev?: null,
      current?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber },
        [BigNumber, BigNumber] & { mintBps: BigNumber; redeemBps: BigNumber }
      ],
      {
        prev: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
        current: [BigNumber, BigNumber] & {
          mintBps: BigNumber;
          redeemBps: BigNumber;
        };
      }
    >;

    "StakingUpdated(address,address)"(
      beforeAddress?: null,
      afterAddress?: null
    ): TypedEventFilter<
      [string, string],
      { beforeAddress: string; afterAddress: string }
    >;

    StakingUpdated(
      beforeAddress?: null,
      afterAddress?: null
    ): TypedEventFilter<
      [string, string],
      { beforeAddress: string; afterAddress: string }
    >;

    "SweetheartUpdated(address,bool)"(
      sweetheart?: null,
      isSweeheart?: null
    ): TypedEventFilter<
      [string, boolean],
      { sweetheart: string; isSweeheart: boolean }
    >;

    SweetheartUpdated(
      sweetheart?: null,
      isSweeheart?: null
    ): TypedEventFilter<
      [string, boolean],
      { sweetheart: string; isSweeheart: boolean }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdrawal(address,uint256)"(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    Withdrawal(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "WithdrawnFromBatch(bytes32,uint256,address)"(
      batchId?: null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { batchId: string; amount: BigNumber; to: string }
    >;

    WithdrawnFromBatch(
      batchId?: null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { batchId: string; amount: BigNumber; to: string }
    >;
  };

  estimateGas: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    accountBalances(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountBatches(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batches(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRedemptionFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    currentMintBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    currentRedeemBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositForMint(
      _amount: BigNumberish,
      _depositFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositForRedeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastMintedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<BigNumber>;

    moveUnclaimedDepositsIntoCurrentBatch(
      _batchIds: BytesLike[],
      _shares: BigNumberish[],
      _batchType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    processingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBasicIssuanceModule(overrides?: CallOverrides): Promise<BigNumber>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(overrides?: CallOverrides): Promise<BigNumber>;

    slippage(overrides?: CallOverrides): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    sweethearts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    threeCrv(overrides?: CallOverrides): Promise<BigNumber>;

    threePool(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountBalances(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountBatches(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRedeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndStake(
      _batchId: BytesLike,
      _claimFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRedemptionFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentMintBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRedeemBatchId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curvePoolTokenPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositForMint(
      _amount: BigNumberish,
      _depositFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositForRedeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBatches(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinAmount3CrvFromRedeem(
      _valueOfComponents: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinAmountToMint(
      _valueOfBatch: BigNumberish,
      _valueOfComponentsPerUnit: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastMintedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRedeemedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveUnclaimedDepositsIntoCurrentBatch(
      _batchIds: BytesLike[],
      _shares: BigNumberish[],
      _batchType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processingThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverLeftover(
      _yTokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redemptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBasicIssuanceModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurvePoolTokenPairs(
      _yTokenAddresses: string[],
      _curvePoolTokenPairs: { curveMetaPool: string; crvLPToken: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProcessingThreshold(
      _cooldown: BigNumberish,
      _mintThreshold: BigNumberish,
      _redeemThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      _feeRate: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlippage(
      _mintSlippage: BigNumberish,
      _redeemSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweethearts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threeCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSweetheart(
      _sweetheart: string,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    valueOf3Crv(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfComponents(
      _tokenAddresses: string[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromBatch(
      _batchId: BytesLike,
      _amountToWithdraw: BigNumberish,
      _withdrawFor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
