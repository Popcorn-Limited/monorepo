/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RewardsDistributionInterface extends ethers.utils.Interface {
  functions: {
    "KEEPER_INCENTIVE()": FunctionFragment;
    "POP()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addRewardDistribution(address,uint256,bool)": FunctionFragment;
    "distributeRewards()": FunctionFragment;
    "distributions(uint256)": FunctionFragment;
    "distributionsLength()": FunctionFragment;
    "editRewardDistribution(uint256,address,uint256,bool)": FunctionFragment;
    "keeperIncentiveBps()": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeRewardDistribution(uint256)": FunctionFragment;
    "setKeeperIncentiveBps(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KEEPER_INCENTIVE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardDistribution",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editRewardDistribution",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperIncentiveBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeRewardDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeperIncentiveBps",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "KEEPER_INCENTIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperIncentiveBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeeperIncentiveBps",
    data: BytesLike
  ): Result;

  events: {
    "KeeperConfigUpdated(tuple,tuple)": EventFragment;
    "Log(uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "RewardDistributionAdded(uint256,address,uint256,bool)": EventFragment;
    "RewardsDistributed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeeperConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
}

export type KeeperConfigUpdatedEvent = TypedEvent<
  [
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    },
    [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    }
  ] & {
    oldConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
    newConfig: [BigNumber, BigNumber, BigNumber] & {
      minWithdrawalAmount: BigNumber;
      incentiveVigBps: BigNumber;
      keeperPayout: BigNumber;
    };
  }
>;

export type LogEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type OwnerChangedEvent = TypedEvent<
  [string, string] & { oldOwner: string; newOwner: string }
>;

export type OwnerNominatedEvent = TypedEvent<[string] & { newOwner: string }>;

export type RewardDistributionAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean] & {
    index: BigNumber;
    destination: string;
    amount: BigNumber;
    isLocker: boolean;
  }
>;

export type RewardsDistributedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export class RewardsDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsDistributionInterface;

  functions: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<[string]>;

    POP(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRewardDistribution(
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        destination: string;
        amount: BigNumber;
        isLocker: boolean;
      }
    >;

    distributionsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    editRewardDistribution(
      index: BigNumberish,
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeperIncentiveBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeRewardDistribution(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeperIncentiveBps(
      _keeperIncentiveBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;

  POP(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRewardDistribution(
    destination: string,
    amount: BigNumberish,
    isLocker: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      destination: string;
      amount: BigNumber;
      isLocker: boolean;
    }
  >;

  distributionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  editRewardDistribution(
    index: BigNumberish,
    destination: string,
    amount: BigNumberish,
    isLocker: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeperIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeRewardDistribution(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeperIncentiveBps(
    _keeperIncentiveBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<string>;

    POP(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addRewardDistribution(
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributeRewards(overrides?: CallOverrides): Promise<boolean>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        destination: string;
        amount: BigNumber;
        isLocker: boolean;
      }
    >;

    distributionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    editRewardDistribution(
      index: BigNumberish,
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeperIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeRewardDistribution(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeperIncentiveBps(
      _keeperIncentiveBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "KeeperConfigUpdated(tuple,tuple)"(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;

    KeeperConfigUpdated(
      oldConfig?: null,
      newConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        }
      ],
      {
        oldConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
        newConfig: [BigNumber, BigNumber, BigNumber] & {
          minWithdrawalAmount: BigNumber;
          incentiveVigBps: BigNumber;
          keeperPayout: BigNumber;
        };
      }
    >;

    "Log(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Log(amount?: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerChanged(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    "OwnerNominated(address)"(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    OwnerNominated(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    "RewardDistributionAdded(uint256,address,uint256,bool)"(
      index?: null,
      destination?: null,
      amount?: null,
      isLocker?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean],
      {
        index: BigNumber;
        destination: string;
        amount: BigNumber;
        isLocker: boolean;
      }
    >;

    RewardDistributionAdded(
      index?: null,
      destination?: null,
      amount?: null,
      isLocker?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean],
      {
        index: BigNumber;
        destination: string;
        amount: BigNumber;
        isLocker: boolean;
      }
    >;

    "RewardsDistributed(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    RewardsDistributed(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    POP(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRewardDistribution(
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    editRewardDistribution(
      index: BigNumberish,
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeperIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeRewardDistribution(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeperIncentiveBps(
      _keeperIncentiveBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KEEPER_INCENTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRewardDistribution(
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editRewardDistribution(
      index: BigNumberish,
      destination: string,
      amount: BigNumberish,
      isLocker: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeperIncentiveBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRewardDistribution(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeperIncentiveBps(
      _keeperIncentiveBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
