/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ContractRegistryInterface extends ethers.utils.Interface {
  functions: {
    "aclRegistry()": FunctionFragment;
    "addContract(bytes32,address,bytes32)": FunctionFragment;
    "contractAddresses(address)": FunctionFragment;
    "contractNames(uint256)": FunctionFragment;
    "contracts(bytes32)": FunctionFragment;
    "deleteContract(bytes32,uint256)": FunctionFragment;
    "getContract(bytes32)": FunctionFragment;
    "getContractIdFromAddress(address)": FunctionFragment;
    "getContractNames()": FunctionFragment;
    "updateContract(bytes32,address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aclRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addContract",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteContract",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractIdFromAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateContract",
    values: [BytesLike, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "aclRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractIdFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContract",
    data: BytesLike
  ): Result;

  events: {
    "ContractAdded(bytes32,address,bytes32)": EventFragment;
    "ContractDeleted(bytes32)": EventFragment;
    "ContractUpdated(bytes32,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
}

export type ContractAddedEvent = TypedEvent<
  [string, string, string] & {
    _name: string;
    _address: string;
    _version: string;
  }
>;

export type ContractDeletedEvent = TypedEvent<[string] & { _name: string }>;

export type ContractUpdatedEvent = TypedEvent<
  [string, string, string] & {
    _name: string;
    _address: string;
    _version: string;
  }
>;

export class ContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ContractRegistryInterface;

  functions: {
    aclRegistry(overrides?: CallOverrides): Promise<[string]>;

    addContract(
      _name: BytesLike,
      _address: string,
      _version: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contracts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { contractAddress: string; version: string }>;

    deleteContract(
      _name: BytesLike,
      _contractIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContract(_name: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getContractIdFromAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractNames(overrides?: CallOverrides): Promise<[string[]]>;

    updateContract(
      _name: BytesLike,
      _newAddress: string,
      _version: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aclRegistry(overrides?: CallOverrides): Promise<string>;

  addContract(
    _name: BytesLike,
    _address: string,
    _version: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractAddresses(arg0: string, overrides?: CallOverrides): Promise<string>;

  contractNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  contracts(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { contractAddress: string; version: string }>;

  deleteContract(
    _name: BytesLike,
    _contractIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContract(_name: BytesLike, overrides?: CallOverrides): Promise<string>;

  getContractIdFromAddress(
    _contractAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractNames(overrides?: CallOverrides): Promise<string[]>;

  updateContract(
    _name: BytesLike,
    _newAddress: string,
    _version: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aclRegistry(overrides?: CallOverrides): Promise<string>;

    addContract(
      _name: BytesLike,
      _address: string,
      _version: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    contractAddresses(arg0: string, overrides?: CallOverrides): Promise<string>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    contracts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { contractAddress: string; version: string }>;

    deleteContract(
      _name: BytesLike,
      _contractIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getContract(_name: BytesLike, overrides?: CallOverrides): Promise<string>;

    getContractIdFromAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractNames(overrides?: CallOverrides): Promise<string[]>;

    updateContract(
      _name: BytesLike,
      _newAddress: string,
      _version: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractAdded(bytes32,address,bytes32)"(
      _name?: null,
      _address?: null,
      _version?: null
    ): TypedEventFilter<
      [string, string, string],
      { _name: string; _address: string; _version: string }
    >;

    ContractAdded(
      _name?: null,
      _address?: null,
      _version?: null
    ): TypedEventFilter<
      [string, string, string],
      { _name: string; _address: string; _version: string }
    >;

    "ContractDeleted(bytes32)"(
      _name?: null
    ): TypedEventFilter<[string], { _name: string }>;

    ContractDeleted(
      _name?: null
    ): TypedEventFilter<[string], { _name: string }>;

    "ContractUpdated(bytes32,address,bytes32)"(
      _name?: null,
      _address?: null,
      _version?: null
    ): TypedEventFilter<
      [string, string, string],
      { _name: string; _address: string; _version: string }
    >;

    ContractUpdated(
      _name?: null,
      _address?: null,
      _version?: null
    ): TypedEventFilter<
      [string, string, string],
      { _name: string; _address: string; _version: string }
    >;
  };

  estimateGas: {
    aclRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    addContract(
      _name: BytesLike,
      _address: string,
      _version: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contracts(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    deleteContract(
      _name: BytesLike,
      _contractIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContract(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractIdFromAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractNames(overrides?: CallOverrides): Promise<BigNumber>;

    updateContract(
      _name: BytesLike,
      _newAddress: string,
      _version: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aclRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addContract(
      _name: BytesLike,
      _address: string,
      _version: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contracts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteContract(
      _name: BytesLike,
      _contractIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContract(
      _name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractIdFromAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractNames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateContract(
      _name: BytesLike,
      _newAddress: string,
      _version: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
