/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "VRFConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBase__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "BeneficiaryGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeneficiaryGovernance__factory>;
    getContractFactory(
      name: "BeneficiaryRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeneficiaryRegistry__factory>;
    getContractFactory(
      name: "BeneficiaryVaults",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeneficiaryVaults__factory>;
    getContractFactory(
      name: "GovStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovStaking__factory>;
    getContractFactory(
      name: "GrantElections",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GrantElections__factory>;
    getContractFactory(
      name: "PopLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PopLocker__factory>;
    getContractFactory(
      name: "RewardsDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsDistribution__factory>;
    getContractFactory(
      name: "RewardsEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsEscrow__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "XPopRedemption",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XPopRedemption__factory>;
    getContractFactory(
      name: "ButterBatchProcessing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ButterBatchProcessing__factory>;
    getContractFactory(
      name: "ButterBatchProcessingV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ButterBatchProcessingV1__factory>;
    getContractFactory(
      name: "ButterBatchProcessingZapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ButterBatchProcessingZapper__factory>;
    getContractFactory(
      name: "ButterFeeConverter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ButterFeeConverter__factory>;
    getContractFactory(
      name: "ButterWhaleProcessing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ButterWhaleProcessing__factory>;
    getContractFactory(
      name: "AbstractBatchController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractBatchController__factory>;
    getContractFactory(
      name: "AbstractFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractFee__factory>;
    getContractFactory(
      name: "AbstractSweethearts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractSweethearts__factory>;
    getContractFactory(
      name: "AbstractBatchStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractBatchStorage__factory>;
    getContractFactory(
      name: "AbstractClientAccess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractClientAccess__factory>;
    getContractFactory(
      name: "AbstractViewableBatchStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractViewableBatchStorage__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "ThreeXBatchProcessing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThreeXBatchProcessing__factory>;
    getContractFactory(
      name: "ThreeXBatchVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThreeXBatchVault__factory>;
    getContractFactory(
      name: "ThreeXWhaleProcessing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThreeXWhaleProcessing__factory>;
    getContractFactory(
      name: "ThreeXZapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThreeXZapper__factory>;
    getContractFactory(
      name: "IACLRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACLRegistry__factory>;
    getContractFactory(
      name: "IBatchContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBatchContract__factory>;
    getContractFactory(
      name: "IAbstractBatchStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAbstractBatchStorage__factory>;
    getContractFactory(
      name: "IViewableBatchStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IViewableBatchStorage__factory>;
    getContractFactory(
      name: "IBeneficiaryRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeneficiaryRegistry__factory>;
    getContractFactory(
      name: "IBeneficiaryVaults",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeneficiaryVaults__factory>;
    getContractFactory(
      name: "IButterBatchProcessing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IButterBatchProcessing__factory>;
    getContractFactory(
      name: "IButterFeeConverter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IButterFeeConverter__factory>;
    getContractFactory(
      name: "IClientBatchStorageAccess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClientBatchStorageAccess__factory>;
    getContractFactory(
      name: "IContractFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractFactory__factory>;
    getContractFactory(
      name: "IContractRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractRegistry__factory>;
    getContractFactory(
      name: "IGovStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovStaking__factory>;
    getContractFactory(
      name: "IGrantRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGrantRegistry__factory>;
    getContractFactory(
      name: "IKeeperIncentiveV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeeperIncentiveV1__factory>;
    getContractFactory(
      name: "IKeeperIncentiveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeeperIncentiveV2__factory>;
    getContractFactory(
      name: "IMerkleOrchard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMerkleOrchard__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IRandomNumberConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomNumberConsumer__factory>;
    getContractFactory(
      name: "IRegion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegion__factory>;
    getContractFactory(
      name: "IRewardsDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsDistribution__factory>;
    getContractFactory(
      name: "IRewardsEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsEscrow__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "IStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingRewards__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IThreeXBatchProcessing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IThreeXBatchProcessing__factory>;
    getContractFactory(
      name: "ITokenManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenManager__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IXPop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXPop__factory>;
    getContractFactory(
      name: "SafeDecimalMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeDecimalMath__factory>;
    getContractFactory(
      name: "XPop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XPop__factory>;
    getContractFactory(
      name: "ACLRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ACLRegistry__factory>;
    getContractFactory(
      name: "ContractRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractRegistry__factory>;
    getContractFactory(
      name: "ContractRegistryAccessUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractRegistryAccessUpgradeable__factory>;
    getContractFactory(
      name: "FeeEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeEscrow__factory>;
    getContractFactory(
      name: "KeeperIncentiveV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperIncentiveV1__factory>;
    getContractFactory(
      name: "KeeperIncentiveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperIncentiveV2__factory>;
    getContractFactory(
      name: "KeeperIncentivized",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperIncentivized__factory>;
    getContractFactory(
      name: "KeeperIncentivizedV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperIncentivizedV1__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "ParticipationReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParticipationReward__factory>;
    getContractFactory(
      name: "RandomNumberConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RandomNumberConsumer__factory>;
    getContractFactory(
      name: "Region",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Region__factory>;
    getContractFactory(
      name: "RewardsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsManager__factory>;
    getContractFactory(
      name: "Superseeder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Superseeder__factory>;
    getContractFactory(
      name: "Curve3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Curve3Pool__factory>;
    getContractFactory(
      name: "CrvLPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvLPToken__factory>;
    getContractFactory(
      name: "CurveAddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveAddressProvider__factory>;
    getContractFactory(
      name: "CurveDepositZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveDepositZap__factory>;
    getContractFactory(
      name: "CurveMetapool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveMetapool__factory>;
    getContractFactory(
      name: "CurveRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveRegistry__factory>;
    getContractFactory(
      name: "StableSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableSwap__factory>;
    getContractFactory(
      name: "ThreeCrv",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThreeCrv__factory>;
    getContractFactory(
      name: "TriPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TriPool__factory>;
    getContractFactory(
      name: "IAngleRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAngleRouter__factory>;
    getContractFactory(
      name: "IBasicIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicIssuanceModule__factory>;
    getContractFactory(
      name: "IGUni",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGUni__factory>;
    getContractFactory(
      name: "IibAMM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IibAMM__factory>;
    getContractFactory(
      name: "ISetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISetToken__factory>;
    getContractFactory(
      name: "IStreamingFeeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStreamingFeeModule__factory>;
    getContractFactory(
      name: "ISynthetix",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISynthetix__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "VaultAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAPI__factory>;
    getContractFactory(
      name: "ILBP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBP__factory>;
    getContractFactory(
      name: "ILBPFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBPFactory__factory>;
    getContractFactory(
      name: "ILBPVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILBPVault__factory>;
    getContractFactory(
      name: "LBPManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LBPManager__factory>;
    getContractFactory(
      name: "MockAngleRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAngleRouter__factory>;
    getContractFactory(
      name: "MockBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBasePool__factory>;
    getContractFactory(
      name: "MockBasicIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBasicIssuanceModule__factory>;
    getContractFactory(
      name: "MockCurveFactory2Metapool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveFactory2Metapool__factory>;
    getContractFactory(
      name: "MockCurveFactoryMetapool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveFactoryMetapool__factory>;
    getContractFactory(
      name: "MockCurveMetapool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveMetapool__factory>;
    getContractFactory(
      name: "MockCurveOraclePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveOraclePool__factory>;
    getContractFactory(
      name: "MockCurveThreepool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveThreepool__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "MockIbAMM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockIbAMM__factory>;
    getContractFactory(
      name: "MockSynthetix",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSynthetix__factory>;
    getContractFactory(
      name: "MockYearnV2Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockYearnV2Vault__factory>;
    getContractFactory(
      name: "ButterBatchProcessingDefendedHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ButterBatchProcessingDefendedHelper__factory>;
    getContractFactory(
      name: "CDai",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDai__factory>;
    getContractFactory(
      name: "Crv3CryptoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Crv3CryptoPool__factory>;
    getContractFactory(
      name: "CrvAavePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvAavePool__factory>;
    getContractFactory(
      name: "CrvCompPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvCompPool__factory>;
    getContractFactory(
      name: "CrvCvxCrvPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvCvxCrvPool__factory>;
    getContractFactory(
      name: "CrvIbBtcPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvIbBtcPool__factory>;
    getContractFactory(
      name: "CrvSBtcPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvSBtcPool__factory>;
    getContractFactory(
      name: "CrvSethPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvSethPool__factory>;
    getContractFactory(
      name: "Faucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Faucet__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "TriPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TriPool__factory>;
    getContractFactory(
      name: "Uniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uniswap__factory>;
    getContractFactory(
      name: "KeeperIncentiveHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperIncentiveHelper__factory>;
    getContractFactory(
      name: "KeeperIncentivizedHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperIncentivizedHelper__factory>;
    getContractFactory(
      name: "ParticipationRewardHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParticipationRewardHelper__factory>;
    getContractFactory(
      name: "RandomNumberHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RandomNumberHelper__factory>;
    getContractFactory(
      name: "StakingDefendedHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingDefendedHelper__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "VRFConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBase>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "BeneficiaryGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeneficiaryGovernance>;
    getContractAt(
      name: "BeneficiaryRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeneficiaryRegistry>;
    getContractAt(
      name: "BeneficiaryVaults",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeneficiaryVaults>;
    getContractAt(
      name: "GovStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovStaking>;
    getContractAt(
      name: "GrantElections",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GrantElections>;
    getContractAt(
      name: "PopLocker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PopLocker>;
    getContractAt(
      name: "RewardsDistribution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsDistribution>;
    getContractAt(
      name: "RewardsEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsEscrow>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "XPopRedemption",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XPopRedemption>;
    getContractAt(
      name: "ButterBatchProcessing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ButterBatchProcessing>;
    getContractAt(
      name: "ButterBatchProcessingV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ButterBatchProcessingV1>;
    getContractAt(
      name: "ButterBatchProcessingZapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ButterBatchProcessingZapper>;
    getContractAt(
      name: "ButterFeeConverter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ButterFeeConverter>;
    getContractAt(
      name: "ButterWhaleProcessing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ButterWhaleProcessing>;
    getContractAt(
      name: "AbstractBatchController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractBatchController>;
    getContractAt(
      name: "AbstractFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractFee>;
    getContractAt(
      name: "AbstractSweethearts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractSweethearts>;
    getContractAt(
      name: "AbstractBatchStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractBatchStorage>;
    getContractAt(
      name: "AbstractClientAccess",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractClientAccess>;
    getContractAt(
      name: "AbstractViewableBatchStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractViewableBatchStorage>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "ThreeXBatchProcessing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThreeXBatchProcessing>;
    getContractAt(
      name: "ThreeXBatchVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThreeXBatchVault>;
    getContractAt(
      name: "ThreeXWhaleProcessing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThreeXWhaleProcessing>;
    getContractAt(
      name: "ThreeXZapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThreeXZapper>;
    getContractAt(
      name: "IACLRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IACLRegistry>;
    getContractAt(
      name: "IBatchContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBatchContract>;
    getContractAt(
      name: "IAbstractBatchStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAbstractBatchStorage>;
    getContractAt(
      name: "IViewableBatchStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IViewableBatchStorage>;
    getContractAt(
      name: "IBeneficiaryRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeneficiaryRegistry>;
    getContractAt(
      name: "IBeneficiaryVaults",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeneficiaryVaults>;
    getContractAt(
      name: "IButterBatchProcessing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IButterBatchProcessing>;
    getContractAt(
      name: "IButterFeeConverter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IButterFeeConverter>;
    getContractAt(
      name: "IClientBatchStorageAccess",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClientBatchStorageAccess>;
    getContractAt(
      name: "IContractFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractFactory>;
    getContractAt(
      name: "IContractRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractRegistry>;
    getContractAt(
      name: "IGovStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovStaking>;
    getContractAt(
      name: "IGrantRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGrantRegistry>;
    getContractAt(
      name: "IKeeperIncentiveV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKeeperIncentiveV1>;
    getContractAt(
      name: "IKeeperIncentiveV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKeeperIncentiveV2>;
    getContractAt(
      name: "IMerkleOrchard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMerkleOrchard>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IRandomNumberConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomNumberConsumer>;
    getContractAt(
      name: "IRegion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegion>;
    getContractAt(
      name: "IRewardsDistribution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsDistribution>;
    getContractAt(
      name: "IRewardsEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsEscrow>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "IStakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingRewards>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IThreeXBatchProcessing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IThreeXBatchProcessing>;
    getContractAt(
      name: "ITokenManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenManager>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IXPop",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IXPop>;
    getContractAt(
      name: "SafeDecimalMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeDecimalMath>;
    getContractAt(
      name: "XPop",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XPop>;
    getContractAt(
      name: "ACLRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ACLRegistry>;
    getContractAt(
      name: "ContractRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractRegistry>;
    getContractAt(
      name: "ContractRegistryAccessUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractRegistryAccessUpgradeable>;
    getContractAt(
      name: "FeeEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeEscrow>;
    getContractAt(
      name: "KeeperIncentiveV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperIncentiveV1>;
    getContractAt(
      name: "KeeperIncentiveV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperIncentiveV2>;
    getContractAt(
      name: "KeeperIncentivized",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperIncentivized>;
    getContractAt(
      name: "KeeperIncentivizedV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperIncentivizedV1>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "ParticipationReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParticipationReward>;
    getContractAt(
      name: "RandomNumberConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RandomNumberConsumer>;
    getContractAt(
      name: "Region",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Region>;
    getContractAt(
      name: "RewardsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsManager>;
    getContractAt(
      name: "Superseeder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Superseeder>;
    getContractAt(
      name: "Curve3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Curve3Pool>;
    getContractAt(
      name: "CrvLPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvLPToken>;
    getContractAt(
      name: "CurveAddressProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveAddressProvider>;
    getContractAt(
      name: "CurveDepositZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveDepositZap>;
    getContractAt(
      name: "CurveMetapool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveMetapool>;
    getContractAt(
      name: "CurveRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveRegistry>;
    getContractAt(
      name: "StableSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableSwap>;
    getContractAt(
      name: "ThreeCrv",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThreeCrv>;
    getContractAt(
      name: "TriPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TriPool>;
    getContractAt(
      name: "IAngleRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAngleRouter>;
    getContractAt(
      name: "IBasicIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasicIssuanceModule>;
    getContractAt(
      name: "IGUni",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGUni>;
    getContractAt(
      name: "IibAMM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IibAMM>;
    getContractAt(
      name: "ISetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISetToken>;
    getContractAt(
      name: "IStreamingFeeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStreamingFeeModule>;
    getContractAt(
      name: "ISynthetix",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISynthetix>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "VaultAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultAPI>;
    getContractAt(
      name: "ILBP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBP>;
    getContractAt(
      name: "ILBPFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBPFactory>;
    getContractAt(
      name: "ILBPVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILBPVault>;
    getContractAt(
      name: "LBPManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LBPManager>;
    getContractAt(
      name: "MockAngleRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAngleRouter>;
    getContractAt(
      name: "MockBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBasePool>;
    getContractAt(
      name: "MockBasicIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBasicIssuanceModule>;
    getContractAt(
      name: "MockCurveFactory2Metapool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveFactory2Metapool>;
    getContractAt(
      name: "MockCurveFactoryMetapool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveFactoryMetapool>;
    getContractAt(
      name: "MockCurveMetapool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveMetapool>;
    getContractAt(
      name: "MockCurveOraclePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveOraclePool>;
    getContractAt(
      name: "MockCurveThreepool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveThreepool>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20PresetMinterPauser>;
    getContractAt(
      name: "MockIbAMM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockIbAMM>;
    getContractAt(
      name: "MockSynthetix",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSynthetix>;
    getContractAt(
      name: "MockYearnV2Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockYearnV2Vault>;
    getContractAt(
      name: "ButterBatchProcessingDefendedHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ButterBatchProcessingDefendedHelper>;
    getContractAt(
      name: "CDai",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDai>;
    getContractAt(
      name: "Crv3CryptoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Crv3CryptoPool>;
    getContractAt(
      name: "CrvAavePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvAavePool>;
    getContractAt(
      name: "CrvCompPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvCompPool>;
    getContractAt(
      name: "CrvCvxCrvPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvCvxCrvPool>;
    getContractAt(
      name: "CrvIbBtcPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvIbBtcPool>;
    getContractAt(
      name: "CrvSBtcPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvSBtcPool>;
    getContractAt(
      name: "CrvSethPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvSethPool>;
    getContractAt(
      name: "Faucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Faucet>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "TriPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TriPool>;
    getContractAt(
      name: "Uniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Uniswap>;
    getContractAt(
      name: "KeeperIncentiveHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperIncentiveHelper>;
    getContractAt(
      name: "KeeperIncentivizedHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperIncentivizedHelper>;
    getContractAt(
      name: "ParticipationRewardHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParticipationRewardHelper>;
    getContractAt(
      name: "RandomNumberHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RandomNumberHelper>;
    getContractAt(
      name: "StakingDefendedHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingDefendedHelper>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
